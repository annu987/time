import React, { useState, useEffect, createContext, useContext, useRef } from 'react';
import { Calendar, Users, Book, Activity, LogOut, Menu, X, Check, Settings, BarChart3, Plus, Trash2, Edit2, RefreshCw, Download, AlertCircle, CheckCircle, Moon, Sun, Bell, Award, TrendingUp, FileText, Clock, MapPin, Zap, Search, Filter, ChevronDown, ChevronRight, Grid, List, AlertTriangle, Printer, MessageCircle, Send, Github, Linkedin, Mail, Code, Lightbulb, Shield, Globe, Info } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';

// Theme Configuration
const themes = {
  light: {
    primary: '#6366F1',
    secondary: '#8B5CF6',
    accent: '#EC4899',
    success: '#10B981',
    warning: '#F59E0B',
    danger: '#EF4444',
    background: '#F9FAFB',
    text: '#111827',
    card: '#FFFFFF',
    cardHover: '#F3F4F6',
    border: '#E5E7EB',
  },
  dark: {
    primary: '#818CF8',
    secondary: '#A78BFA',
    accent: '#F472B6',
    success: '#34D399',
    warning: '#FBBF24',
    danger: '#F87171',
    background: '#111827',
    text: '#F9FAFB',
    card: '#1F2937',
    cardHover: '#374151',
    border: '#374151',
  }
};

// Fixed Faculty-Subject Mapping
const FACULTY_SUBJECTS = [
  { id: 'F1', faculty: 'Dr. Lakshmi Reddy', subject: 'Data Structures', code: 'CS201', department: 'CSE' },
  { id: 'F2', faculty: 'Dr. Bhaskar Rao', subject: 'Algorithms', code: 'CS202', department: 'CSE' },
  { id: 'F3', faculty: 'Dr. Swarna Kumar', subject: 'Database Systems', code: 'CS301', department: 'CSE' },
  { id: 'F4', faculty: 'Dr. Sreekanth Varma', subject: 'Web Development', code: 'CS303', department: 'CSE' },
  { id: 'F5', faculty: 'Dr. Anil Krishna', subject: 'Machine Learning', code: 'CS401', department: 'CSE' },
  { id: 'F6', faculty: 'Dr. Ayesha Begum', subject: 'Operating Systems', code: 'CS302', department: 'CSE' },
  { id: 'F7', faculty: 'Dr. Ramesh Babu', subject: 'Computer Networks', code: 'CS304', department: 'CSE' },
  { id: 'F8', faculty: 'Dr. Geeta Sharma', subject: 'Software Engineering', code: 'CS305', department: 'CSE' },
];

const STUDENT_LIST = [
  { id: 'S001', name: 'Rahul Kumar', rollNo: '21CS001', class: 'CS-A' },
  { id: 'S002', name: 'Priya Singh', rollNo: '21CS002', class: 'CS-A' },
  { id: 'S003', name: 'Amit Patel', rollNo: '21CS003', class: 'CS-A' },
  { id: 'S004', name: 'Sneha Reddy', rollNo: '21CS004', class: 'CS-B' },
  { id: 'S005', name: 'Vikram Sharma', rollNo: '21CS005', class: 'CS-B' },
  { id: 'S006', name: 'Anjali Mehta', rollNo: '21CS006', class: 'CS-B' },
  { id: 'S007', name: 'Rajesh Gupta', rollNo: '21CS007', class: 'CS-A' },
  { id: 'S008', name: 'Pooja Iyer', rollNo: '21CS008', class: 'CS-A' },
  { id: 'S009', name: 'Arjun Nair', rollNo: '21CS009', class: 'CS-B' },
  { id: 'S010', name: 'Divya Krishnan', rollNo: '21CS010', class: 'CS-B' },
];

const CLASSROOMS = [
  { id: 'R1', name: 'Room 101', capacity: 60, type: 'Lecture Hall', building: 'Block A', floor: 1, equipment: ['Projector', 'Smart Board', 'AC'] },
  { id: 'R2', name: 'Room 102', capacity: 50, type: 'Classroom', building: 'Block A', floor: 1, equipment: ['Projector', 'White Board'] },
  { id: 'R3', name: 'Room 201', capacity: 45, type: 'Classroom', building: 'Block A', floor: 2, equipment: ['Projector', 'AC'] },
  { id: 'R4', name: 'Lab A', capacity: 30, type: 'Computer Lab', building: 'Block B', floor: 1, equipment: ['30 Computers', 'Projector', 'AC'] },
  { id: 'R5', name: 'Lab B', capacity: 30, type: 'Computer Lab', building: 'Block B', floor: 1, equipment: ['30 Computers', 'Projector'] },
  { id: 'R6', name: 'Seminar Hall', capacity: 100, type: 'Auditorium', building: 'Block C', floor: 1, equipment: ['Projector', 'Sound System', 'AC', 'Stage'] },
  { id: 'R7', name: 'Room 301', capacity: 40, type: 'Classroom', building: 'Block A', floor: 3, equipment: ['Projector', 'White Board', 'AC'] },
  { id: 'R8', name: 'Lab C', capacity: 25, type: 'Computer Lab', building: 'Block B', floor: 2, equipment: ['25 Computers', 'Projector', 'AC'] },
];

const TIME_SLOTS = ['09:00-10:00', '10:00-11:00', '11:15-12:15', '12:15-13:15', '14:00-15:00', '15:00-16:00', '16:00-17:00'];
const DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];

// Team Members Data
const TEAM_MEMBERS = [
  {
    id: 1,
    name: 'Mohammed Anaan',
    role: 'Team Leader',
    initials: 'MA',
    description: 'Leading the team with vision and expertise in project management',
    github: '#',
    linkedin: '#',
    email: 'anaan@example.com',
    color: '#6366F1'
  },
  {
    id: 2,
    name: 'K. Niroop Raj',
    role: 'Backend Developer',
    initials: 'KN',
    description: 'Building robust backend systems and APIs',
    github: '#',
    linkedin: '#',
    email: 'niroop@example.com',
    color: '#8B5CF6'
  },
  {
    id: 3,
    name: 'Mohd Shafeeq',
    role: 'Frontend UI/UX',
    initials: 'MS',
    description: 'Creating beautiful and intuitive user interfaces',
    github: '#',
    linkedin: '#',
    email: 'shafeeq@example.com',
    color: '#EC4899'
  },
  {
    id: 4,
    name: 'B. Uday',
    role: 'Designer',
    initials: 'BU',
    description: 'Designing stunning visuals and user experiences',
    github: '#',
    linkedin: '#',
    email: 'uday@example.com',
    color: '#10B981'
  }
];

// Context
const AppContext = createContext();

const useAppContext = () => {
  const context = useContext(AppContext);
  if (!context) throw new Error('useAppContext must be used within AppProvider');
  return context;
};

// 🎉 NEW: Confetti Effect Component
const ConfettiEffect = () => {
  const [show, setShow] = useState(true);
  
  useEffect(() => {
    const timer = setTimeout(() => setShow(false), 3000);
    return () => clearTimeout(timer);
  }, []);
  
  if (!show) return null;
  
  return (
    <div className="fixed inset-0 pointer-events-none z-50 overflow-hidden">
      {[...Array(50)].map((_, i) => (
        <div
          key={i}
          className="absolute w-2 h-2 rounded-full animate-fall"
          style={{
            left: `${Math.random() * 100}%`,
            top: `-10px`,
            backgroundColor: ['#6366F1', '#8B5CF6', '#EC4899', '#10B981'][Math.floor(Math.random() * 4)],
            animationDelay: `${Math.random() * 2}s`,
            animationDuration: `${2 + Math.random() * 2}s`
          }}
        />
      ))}
    </div>
  );
};

// 🎉 NEW: Loading Skeleton Component
const LoadingSkeleton = ({ theme }) => (
  <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6 animate-pulse">
    <div style={{ backgroundColor: theme.background }} className="h-8 w-3/4 rounded mb-4"></div>
    <div style={{ backgroundColor: theme.background }} className="h-4 w-1/2 rounded mb-6"></div>
    <div className="space-y-3">
      {[1, 2, 3, 4].map(i => (
        <div key={i} style={{ backgroundColor: theme.background }} className="h-20 rounded"></div>
      ))}
    </div>
  </div>
);

// 🤖 NEW: Chatbot Component
const Chatbot = () => {
  const { theme, timetable, bookings, grades, user, detectConflicts } = useAppContext();
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    { id: 1, text: "Hello! I'm your AI assistant. How can I help you today?", sender: 'bot', timestamp: new Date() }
  ]);
  const [inputText, setInputText] = useState('');
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const generateResponse = (userMessage) => {
    const lowerMessage = userMessage.toLowerCase();
    
    // Timetable queries
    if (lowerMessage.includes('timetable') || lowerMessage.includes('schedule') || lowerMessage.includes('class')) {
      const today = new Date().toLocaleDateString('en-US', { weekday: 'long' });
      const todayClasses = timetable.filter(slot => slot.day === today);
      
      if (todayClasses.length > 0) {
        return `You have ${todayClasses.length} classes today (${today}): ${todayClasses.map(c => `${c.subject} at ${c.timeSlot} in ${c.room}`).join(', ')}`;
      } else {
        return `You don't have any classes scheduled for today (${today}).`;
      }
    }
    
    // Booking queries
    if (lowerMessage.includes('booking') || lowerMessage.includes('room')) {
      if (bookings.length > 0) {
        return `You have ${bookings.length} room bookings. ${bookings.filter(b => b.status === 'pending').length} are pending approval.`;
      } else {
        return "You don't have any room bookings at the moment.";
      }
    }
    
    // Grade queries
    if (lowerMessage.includes('grade') || lowerMessage.includes('marks') || lowerMessage.includes('result')) {
      if (user.role === 'student' && grades.length > 0) {
        const avgGrade = grades.reduce((acc, g) => acc + g.average, 0) / grades.length;
        return `Your current average is ${avgGrade.toFixed(2)}%. You have grades for ${grades.length} subjects.`;
      } else if (user.role === 'faculty') {
        return "As faculty, you can upload grades for your subjects in the Upload Grades section.";
      } else {
        return "No grade information available yet.";
      }
    }
    
    // Analytics queries
    if (lowerMessage.includes('analytics') || lowerMessage.includes('report') || lowerMessage.includes('statistics')) {
      return `The system has scheduled ${timetable.length} classes with ${detectConflicts().length} conflicts. Check the Analytics section for detailed reports.`;
    }
    
    // Help queries
    if (lowerMessage.includes('help') || lowerMessage.includes('navigate') || lowerMessage.includes('how to')) {
      return "You can navigate through different sections using the sidebar: Dashboard, Smart Scheduler, Smart Classroom, Analytics, and more. Each section has specific features for managing your educational needs.";
    }
    
    // Default response
    return "I'm not sure how to help with that. You can ask me about timetables, bookings, grades, analytics, or navigation help.";
  };

  const handleSendMessage = () => {
    if (inputText.trim() === '') return;
    
    const newMessage = {
      id: messages.length + 1,
      text: inputText,
      sender: 'user',
      timestamp: new Date()
    };
    
    setMessages([...messages, newMessage]);
    
    // Generate bot response
    setTimeout(() => {
      const botResponse = {
        id: messages.length + 2,
        text: generateResponse(inputText),
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botResponse]);
    }, 1000);
    
    setInputText('');
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <>
      {/* Floating Chat Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        style={{
          backgroundColor: theme.primary,
          boxShadow: `0 4px 12px ${theme.primary}40`
        }}
        className="fixed bottom-6 right-6 w-14 h-14 rounded-full flex items-center justify-center text-white hover:opacity-90 transition-all z-40 transform hover:scale-110"
      >
        {isOpen ? <X size={24} /> : <MessageCircle size={24} />}
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div
          style={{
            backgroundColor: theme.card,
            borderColor: theme.border,
            boxShadow: `0 10px 25px ${theme.background}80`
          }}
          className="fixed bottom-24 right-6 w-80 h-96 rounded-xl shadow-2xl flex flex-col z-40 border"
        >
          {/* Chat Header */}
          <div
            style={{
              background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 100%)`
            }}
            className="p-4 rounded-t-xl flex items-center justify-between"
          >
            <div className="flex items-center gap-2">
              <MessageCircle size={20} className="text-white" />
              <h3 style={{ color: 'white' }} className="font-bold">AI Assistant</h3>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className="text-white hover:bg-white hover:bg-opacity-20 rounded p-1 transition-all"
            >
              <X size={18} />
            </button>
          </div>

          {/* Messages Area */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3">
            {messages.map(message => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  style={{
                    backgroundColor: message.sender === 'user' ? theme.primary : theme.background,
                    color: message.sender === 'user' ? 'white' : theme.text,
                    maxWidth: '80%'
                  }}
                  className="px-3 py-2 rounded-lg text-sm"
                >
                  <p>{message.text}</p>
                  <p
                    style={{
                      color: message.sender === 'user' ? 'rgba(255,255,255,0.7)' : theme.text,
                      opacity: 0.6
                    }}
                    className="text-xs mt-1"
                  >
                    {message.timestamp.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                  </p>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          {/* Input Area */}
          <div className="p-3 border-t" style={{ borderColor: theme.border }}>
            <div className="flex gap-2">
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Type your message..."
                style={{
                  backgroundColor: theme.background,
                  color: theme.text,
                  borderColor: theme.border
                }}
                className="flex-1 px-3 py-2 border rounded-lg text-sm focus:outline-none focus:ring-2"
              />
              <button
                onClick={handleSendMessage}
                style={{ backgroundColor: theme.primary }}
                className="px-3 py-2 rounded-lg text-white hover:opacity-90 transition-all"
              >
                <Send size={18} />
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

// 🆕 NEW: localStorage utilities
const saveToLocalStorage = (key, data) => {
  try {
    localStorage.setItem(key, JSON.stringify(data));
  } catch (error) {
    console.error('Error saving to localStorage:', error);
  }
};

const loadFromLocalStorage = (key, defaultValue = []) => {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : defaultValue;
  } catch (error) {
    console.error('Error loading from localStorage:', error);
    return defaultValue;
  }
};

const AppProvider = ({ children }) => {
  // Initialize state with data from localStorage
  const [user, setUser] = useState(() => loadFromLocalStorage('user', null));
  const [timetable, setTimetable] = useState(() => loadFromLocalStorage('timetable', []));
  const [bookings, setBookings] = useState(() => loadFromLocalStorage('bookings', []));
  const [announcements, setAnnouncements] = useState(() => loadFromLocalStorage('announcements', []));
  const [grades, setGrades] = useState(() => loadFromLocalStorage('grades', []));
  const [attendance, setAttendance] = useState(() => loadFromLocalStorage('attendance', []));
  const [loading, setLoading] = useState(false);
  const [notification, setNotification] = useState(null);
  const [darkMode, setDarkMode] = useState(() => loadFromLocalStorage('darkMode', false));
  const [showConfetti, setShowConfetti] = useState(false);

  const theme = darkMode ? themes.dark : themes.light;

  // Save state to localStorage whenever it changes
  useEffect(() => {
    saveToLocalStorage('user', user);
  }, [user]);

  useEffect(() => {
    saveToLocalStorage('timetable', timetable);
  }, [timetable]);

  useEffect(() => {
    saveToLocalStorage('bookings', bookings);
  }, [bookings]);

  useEffect(() => {
    saveToLocalStorage('announcements', announcements);
  }, [announcements]);

  useEffect(() => {
    saveToLocalStorage('grades', grades);
  }, [grades]);

  useEffect(() => {
    saveToLocalStorage('attendance', attendance);
  }, [attendance]);

  useEffect(() => {
    saveToLocalStorage('darkMode', darkMode);
  }, [darkMode]);

  const showNotification = (message, type = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 4000);
  };

  const toggleTheme = () => setDarkMode(prev => !prev);

  // 🆕 NEW: Clear all data function
  const clearAllData = () => {
    try {
      localStorage.clear();
      setUser(null);
      setTimetable([]);
      setBookings([]);
      setAnnouncements([]);
      setGrades([]);
      setAttendance([]);
      setDarkMode(false);
      showNotification('All data cleared successfully', 'success');
    } catch (error) {
      console.error('Error clearing data:', error);
      showNotification('Failed to clear data', 'error');
    }
  };

  // AI-Powered Timetable Generation with Conflict Detection
  const generateAITimetable = () => {
    setLoading(true);
    setTimeout(() => {
      const newSchedule = [];
      const conflicts = [];
      let idCounter = 1;

      const occupiedSlots = new Set();

      DAYS.forEach(day => {
        const shuffledSubjects = [...FACULTY_SUBJECTS].sort(() => Math.random() - 0.5);
        
        TIME_SLOTS.forEach((timeSlot, timeIdx) => {
          if (timeIdx < shuffledSubjects.length) {
            const subjectData = shuffledSubjects[timeIdx];
            
            let assignedRoom = null;
            for (const room of CLASSROOMS) {
              const roomKey = `${day}-${timeSlot}-${room.name}`;
              const facultyKey = `${day}-${timeSlot}-${subjectData.faculty}`;
              
              if (!occupiedSlots.has(roomKey) && !occupiedSlots.has(facultyKey)) {
                if (subjectData.subject.includes('Lab') || subjectData.subject.includes('Network')) {
                  if (room.type === 'Computer Lab') {
                    assignedRoom = room;
                    occupiedSlots.add(roomKey);
                    occupiedSlots.add(facultyKey);
                    break;
                  }
                } else {
                  if (room.type !== 'Computer Lab' && room.type !== 'Auditorium') {
                    assignedRoom = room;
                    occupiedSlots.add(roomKey);
                    occupiedSlots.add(facultyKey);
                    break;
                  }
                }
              }
            }

            if (assignedRoom) {
              newSchedule.push({
                id: `TT-${idCounter++}`,
                subject: subjectData.subject,
                subjectCode: subjectData.code,
                faculty: subjectData.faculty,
                facultyId: subjectData.id,
                day,
                timeSlot,
                room: assignedRoom.name,
                roomId: assignedRoom.id,
                classSection: 'CS-A',
                status: 'active',
                type: 'regular'
              });
            } else {
              conflicts.push({
                subject: subjectData.subject,
                faculty: subjectData.faculty,
                day,
                timeSlot,
                reason: 'No available room or faculty conflict'
              });
            }
          }
        });
      });

      setTimetable(newSchedule);
      saveToLocalStorage('timetable', newSchedule); // 🆕 Explicitly save the timetable
      
      if (conflicts.length > 0) {
        showNotification(`⚠️ Generated with ${conflicts.length} conflicts. Check analytics.`, 'warning');
      } else {
        setShowConfetti(true);
        showNotification(`✅ Perfect schedule generated! ${newSchedule.length} classes, zero conflicts!`, 'success');
      }
      
      setLoading(false);
    }, 2500);
  };

  const detectConflicts = () => {
    const conflicts = [];
    const slotMap = {};

    timetable.forEach(slot => {
      const roomKey = `${slot.day}-${slot.timeSlot}-${slot.room}`;
      const facultyKey = `${slot.day}-${slot.timeSlot}-${slot.faculty}`;

      if (slotMap[roomKey]) {
        conflicts.push({
          type: 'Room Conflict',
          details: `${slot.room} double-booked on ${slot.day} at ${slot.timeSlot}`,
          classes: [slotMap[roomKey], slot]
        });
      }
      if (slotMap[facultyKey]) {
        conflicts.push({
          type: 'Faculty Conflict',
          details: `${slot.faculty} scheduled twice on ${slot.day} at ${slot.timeSlot}`,
          classes: [slotMap[facultyKey], slot]
        });
      }

      slotMap[roomKey] = slot;
      slotMap[facultyKey] = slot;
    });

    return conflicts;
  };

  const login = (email, password) => {
    setLoading(true);
    setTimeout(() => {
      let userData = null;
      
      if (email === 'admin@school.com' && password === 'admin123') {
        userData = { name: 'Admin User', email, role: 'admin' };
      }
      else if (email === 'lakshmi@school.com' && password === 'faculty123') {
        userData = { name: 'Dr. Lakshmi Reddy', email, role: 'faculty', subject: 'Data Structures', facultyId: 'F1' };
      } else if (email === 'bhaskar@school.com' && password === 'faculty123') {
        userData = { name: 'Dr. Bhaskar Rao', email, role: 'faculty', subject: 'Algorithms', facultyId: 'F2' };
      } else if (email === 'swarna@school.com' && password === 'faculty123') {
        userData = { name: 'Dr. Swarna Kumar', email, role: 'faculty', subject: 'Database Systems', facultyId: 'F3' };
      } else if (email === 'sreekanth@school.com' && password === 'faculty123') {
        userData = { name: 'Dr. Sreekanth Varma', email, role: 'faculty', subject: 'Web Development', facultyId: 'F4' };
      } else if (email === 'anil@school.com' && password === 'faculty123') {
        userData = { name: 'Dr. Anil Krishna', email, role: 'faculty', subject: 'Machine Learning', facultyId: 'F5' };
      } else if (email === 'ayesha@school.com' && password === 'faculty123') {
        userData = { name: 'Dr. Ayesha Begum', email, role: 'faculty', subject: 'Operating Systems', facultyId: 'F6' };
      } else if (email === 'ramesh@school.com' && password === 'faculty123') {
        userData = { name: 'Dr. Ramesh Babu', email, role: 'faculty', subject: 'Computer Networks', facultyId: 'F7' };
      } else if (email === 'geeta@school.com' && password === 'faculty123') {
        userData = { name: 'Dr. Geeta Sharma', email, role: 'faculty', subject: 'Software Engineering', facultyId: 'F8' };
      }
      else if (email === '21CS001@school.com' && password === 'student123') {
        userData = { name: 'Rahul Kumar', email, role: 'student', rollNo: '21CS001', class: 'CS-A' };
      } else if (email === '21CS002@school.com' && password === 'student123') {
        userData = { name: 'Priya Singh', email, role: 'student', rollNo: '21CS002', class: 'CS-A' };
      } else if (email === '21CS003@school.com' && password === 'student123') {
        userData = { name: 'Amit Patel', email, role: 'student', rollNo: '21CS003', class: 'CS-A' };
      } else if (email === '21CS004@school.com' && password === 'student123') {
        userData = { name: 'Sneha Reddy', email, role: 'student', rollNo: '21CS004', class: 'CS-B' };
      } else if (email === '21CS005@school.com' && password === 'student123') {
        userData = { name: 'Vikram Sharma', email, role: 'student', rollNo: '21CS005', class: 'CS-B' };
      } else if (email === '21CS006@school.com' && password === 'student123') {
        userData = { name: 'Anjali Mehta', email, role: 'student', rollNo: '21CS006', class: 'CS-B' };
      } else if (email === '21CS007@school.com' && password === 'student123') {
        userData = { name: 'Rajesh Gupta', email, role: 'student', rollNo: '21CS007', class: 'CS-A' };
      } else if (email === '21CS008@school.com' && password === 'student123') {
        userData = { name: 'Pooja Iyer', email, role: 'student', rollNo: '21CS008', class: 'CS-A' };
      } else if (email === '21CS009@school.com' && password === 'student123') {
        userData = { name: 'Arjun Nair', email, role: 'student', rollNo: '21CS009', class: 'CS-B' };
      } else if (email === '21CS010@school.com' && password === 'student123') {
        userData = { name: 'Divya Krishnan', email, role: 'student', rollNo: '21CS010', class: 'CS-B' };
      }

      if (userData) {
        setUser(userData);
        saveToLocalStorage('user', userData); // 🆕 Explicitly save user data
        showNotification(`Welcome back, ${userData.name}!`, 'success');
        
        if (timetable.length === 0 && announcements.length === 0) {
          loadDemoData();
        }
      } else {
        showNotification('Invalid credentials', 'error');
      }
      
      setLoading(false);
    }, 1000);
  };

  const logout = () => {
    setUser(null);
    showNotification('Logged out successfully', 'info');
    // Don't clear all data on logout, just the user session
    // If you want to clear all data, uncomment the line below:
    // localStorage.clear();
  };

  const loadDemoData = () => {
    const demoAnnouncements = [
      { id: 'A1', title: 'Mid-term Exams Schedule Released', message: 'Mid-term examinations will begin from November 1st. Check the portal for detailed schedule.', priority: 'high', createdAt: new Date().toISOString(), author: 'Admin' },
      { id: 'A2', title: 'Holiday Notice - Diwali Break', message: 'College will remain closed from Oct 24-28. Classes resume on Oct 29.', priority: 'medium', createdAt: new Date(Date.now() - 86400000).toISOString(), author: 'Admin' },
      { id: 'A3', title: 'Smart Education System Launch', message: 'New AI-powered scheduling system is now live! Experience hassle-free timetable management.', priority: 'high', createdAt: new Date(Date.now() - 172800000).toISOString(), author: 'Admin' },
    ];

    const demoGrades = [
      { id: 'G1', studentRollNo: '21CS001', studentName: 'Rahul Kumar', subject: 'Data Structures', midterm: 85, final: 90, average: 87.5, grade: 'A', facultyName: 'Dr. Lakshmi Reddy' },
      { id: 'G2', studentRollNo: '21CS001', studentName: 'Rahul Kumar', subject: 'Algorithms', midterm: 88, final: 92, average: 90, grade: 'A+', facultyName: 'Dr. Bhaskar Rao' },
      { id: 'G3', studentRollNo: '21CS002', studentName: 'Priya Singh', subject: 'Data Structures', midterm: 92, final: 95, average: 93.5, grade: 'A+', facultyName: 'Dr. Lakshmi Reddy' },
    ];

    const demoBookings = [
      { id: 'B1', room: 'Seminar Hall', roomId: 'R6', purpose: 'Tech Talk on AI', requestedBy: 'Dr. Anil Krishna', date: '2025-10-25', timeSlot: '14:00-15:00', status: 'approved', capacity: 80 },
      { id: 'B2', room: 'Lab A', roomId: 'R4', purpose: 'Hackathon Workshop', requestedBy: 'Student Council', date: '2025-10-26', timeSlot: '10:00-11:00', status: 'pending', capacity: 30 },
    ];

    setAnnouncements(demoAnnouncements);
    setGrades(demoGrades);
    setBookings(demoBookings);
    
    // 🆕 Save demo data to localStorage
    saveToLocalStorage('announcements', demoAnnouncements);
    saveToLocalStorage('grades', demoGrades);
    saveToLocalStorage('bookings', demoBookings);
  };

  const value = {
    user,
    timetable,
    bookings,
    announcements,
    grades,
    attendance,
    loading,
    notification,
    darkMode,
    theme,
    showConfetti,
    login,
    logout,
    toggleTheme,
    showNotification,
    setLoading,
    setTimetable,
    setBookings,
    setAnnouncements,
    setGrades,
    setAttendance,
    setShowConfetti,
    generateAITimetable,
    detectConflicts,
    clearAllData, // 🆕 Add this new function
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
};

// Notification Component
const Notification = ({ message, type, theme }) => {
  const bgColor = type === 'error' ? theme.danger : type === 'success' ? theme.success : type === 'warning' ? theme.warning : theme.primary;
  const Icon = type === 'error' ? AlertCircle : type === 'success' ? CheckCircle : type === 'warning' ? AlertTriangle : Bell;

  return (
    <div style={{ backgroundColor: bgColor }} className="fixed top-4 right-4 text-white px-6 py-3 rounded-lg shadow-2xl flex items-center gap-3 z-50 animate-slide-in">
      <Icon size={20} />
      <span className="font-medium">{message}</span>
    </div>
  );
};

// Main App
const SmartEducationApp = () => {
  const { user, notification, theme, showConfetti } = useAppContext();
  const [currentView, setCurrentView] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(true);

  if (!user) {
    return <LoginScreen />;
  }

  return (
    <div style={{ backgroundColor: theme.background, color: theme.text, minHeight: '100vh' }} className="flex">
      {notification && <Notification {...notification} theme={theme} />}
      {showConfetti && <ConfettiEffect />}
      
      <Sidebar 
        sidebarOpen={sidebarOpen} 
        setSidebarOpen={setSidebarOpen}
        currentView={currentView}
        setCurrentView={setCurrentView}
      />

      <div className="flex-1 flex flex-col overflow-hidden">
        <Header />
        
        <main className="flex-1 overflow-auto p-4 md:p-6">
          {currentView === 'dashboard' && <DashboardView setCurrentView={setCurrentView} />}
          {currentView === 'timetable' && <TimetableView />}
          {currentView === 'classroom' && <SmartClassroomView />}
          {currentView === 'analytics' && <AnalyticsView />}
          {currentView === 'announcements' && <AnnouncementsView />}
          {currentView === 'attendance' && user.role === 'faculty' && <AttendanceView />}
          {currentView === 'grades-upload' && user.role === 'faculty' && <UploadGradesView />}
          {currentView === 'grades' && user.role === 'student' && <StudentGradesView />}
          {currentView === 'about' && <AboutView />}
          {currentView === 'settings' && <SettingsView />}
        </main>
      </div>
      
      <Chatbot />
    </div>
  );
};

// Sidebar
const Sidebar = ({ sidebarOpen, setSidebarOpen, currentView, setCurrentView }) => {
  const { user, logout, theme, darkMode, toggleTheme, announcements } = useAppContext();
  const highPriorityCount = announcements.filter(a => a.priority === 'high').length;

  return (
    <div style={{ background: `linear-gradient(180deg, ${theme.primary} 0%, ${theme.secondary} 100%)` }} className={`${sidebarOpen ? 'w-64' : 'w-20'} text-white transition-all duration-300 flex flex-col shadow-2xl`}>
      <div className="p-4 flex items-center justify-between border-b border-white border-opacity-20">
        {sidebarOpen && (
          <div>
            <h1 className="text-xl font-bold">Smart Education</h1>
            <p className="text-xs opacity-75">AI-Powered System</p>
          </div>
        )}
        <button onClick={() => setSidebarOpen(!sidebarOpen)} className="p-2 hover:bg-white hover:bg-opacity-10 rounded-lg transition-all">
          {sidebarOpen ? <X size={20} /> : <Menu size={20} />}
        </button>
      </div>
      
      <nav className="flex-1 px-2 py-4 space-y-1 overflow-y-auto">
        <NavItem icon={<Activity />} label="Dashboard" active={currentView === 'dashboard'} onClick={() => setCurrentView('dashboard')} collapsed={!sidebarOpen} />
        <NavItem icon={<Calendar />} label="Smart Scheduler" active={currentView === 'timetable'} onClick={() => setCurrentView('timetable')} collapsed={!sidebarOpen} />
        <NavItem icon={<MapPin />} label="Smart Classroom" active={currentView === 'classroom'} onClick={() => setCurrentView('classroom')} collapsed={!sidebarOpen} />
        
        {user.role === 'admin' && (
          <>
            <div className="px-2 py-3 mt-4">{sidebarOpen && <p className="text-xs font-semibold opacity-70 uppercase tracking-wider">Admin</p>}</div>
            <NavItem icon={<BarChart3 />} label="Analytics" active={currentView === 'analytics'} onClick={() => setCurrentView('analytics')} collapsed={!sidebarOpen} />
            <div className="relative">
              <NavItem icon={<Bell />} label="Announcements" active={currentView === 'announcements'} onClick={() => setCurrentView('announcements')} collapsed={!sidebarOpen} />
              {highPriorityCount > 0 && (
                <span className="absolute top-1 right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold">
                  {highPriorityCount}
                </span>
              )}
            </div>
          </>
        )}
        
        {user.role === 'faculty' && (
          <>
            <div className="px-2 py-3 mt-4">{sidebarOpen && <p className="text-xs font-semibold opacity-70 uppercase tracking-wider">Faculty</p>}</div>
            <NavItem icon={<Check />} label="Attendance" active={currentView === 'attendance'} onClick={() => setCurrentView('attendance')} collapsed={!sidebarOpen} />
            <NavItem icon={<FileText />} label="Upload Grades" active={currentView === 'grades-upload'} onClick={() => setCurrentView('grades-upload')} collapsed={!sidebarOpen} />
          </>
        )}
        
        {user.role === 'student' && (
          <>
            <div className="px-2 py-3 mt-4">{sidebarOpen && <p className="text-xs font-semibold opacity-70 uppercase tracking-wider">Student</p>}</div>
            <NavItem icon={<Award />} label="My Grades" active={currentView === 'grades'} onClick={() => setCurrentView('grades')} collapsed={!sidebarOpen} />
            <div className="relative">
              <NavItem icon={<Bell />} label="Announcements" active={currentView === 'announcements'} onClick={() => setCurrentView('announcements')} collapsed={!sidebarOpen} />
              {highPriorityCount > 0 && (
                <span className="absolute top-1 right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold">
                  {highPriorityCount}
                </span>
              )}
            </div>
          </>
        )}
        
        <div className="px-2 py-3 mt-4">{sidebarOpen && <p className="text-xs font-semibold opacity-70 uppercase tracking-wider">More</p>}</div>
        <NavItem icon={<Info />} label="About" active={currentView === 'about'} onClick={() => setCurrentView('about')} collapsed={!sidebarOpen} />
        <NavItem icon={<Settings />} label="Profile" active={currentView === 'settings'} onClick={() => setCurrentView('settings')} collapsed={!sidebarOpen} />
      </nav>
      
      <div className="p-4 border-t border-white border-opacity-20 space-y-2">
        <button onClick={toggleTheme} className="flex items-center gap-3 w-full p-2 hover:bg-white hover:bg-opacity-10 rounded-lg transition-all text-sm">
          {darkMode ? <Sun size={20} /> : <Moon size={20} />}
          {sidebarOpen && <span>{darkMode ? 'Light' : 'Dark'} Mode</span>}
        </button>
        <button onClick={logout} className="flex items-center gap-3 w-full p-2 hover:bg-white hover:bg-opacity-10 rounded-lg transition-all text-sm">
          <LogOut size={20} />
          {sidebarOpen && <span>Logout</span>}
        </button>
      </div>
    </div>
  );
};

const NavItem = ({ icon, label, active, onClick, collapsed }) => (
  <button onClick={onClick} className={`flex items-center gap-3 w-full p-3 rounded-lg transition-all text-sm font-medium ${active ? 'bg-white bg-opacity-20 shadow-lg' : 'hover:bg-white hover:bg-opacity-10'}`}>
    {icon}
    {!collapsed && <span>{label}</span>}
  </button>
);

// Header
const Header = () => {
  const { user, theme } = useAppContext();
  const currentTime = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

  return (
    <header style={{ backgroundColor: theme.card, borderBottom: `1px solid ${theme.border}` }} className="p-4 flex items-center justify-between sticky top-0 z-10 shadow-sm">
      <div>
        <h2 className="text-2xl font-bold" style={{ color: theme.text }}>
          Welcome, {user.name}
        </h2>
        <p style={{ color: theme.text, opacity: 0.6 }} className="text-sm capitalize flex items-center gap-2">
          <span className="inline-block w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
          {user.role} • {currentTime}
        </p>
      </div>
      <div style={{ background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 100%)` }} className="w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg">
        {user.name.charAt(0).toUpperCase()}
      </div>
    </header>
  );
};

// Login Screen
const LoginScreen = () => {
  const { login, loading, theme, darkMode, toggleTheme } = useAppContext();
  const [email, setEmail] = useState('admin@school.com');
  const [password, setPassword] = useState('admin123');

  const handleSubmit = (e) => {
    e.preventDefault();
    login(email, password);
  };

  return (
    <div style={{ background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 50%, ${theme.accent} 100%)` }} className="min-h-screen flex items-center justify-center p-4 relative overflow-hidden">
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div style={{ backgroundColor: theme.card, opacity: 0.1 }} className="absolute w-96 h-96 rounded-full -top-48 -left-48 animate-float"></div>
        <div style={{ backgroundColor: theme.card, opacity: 0.1 }} className="absolute w-96 h-96 rounded-full -bottom-48 -right-48 animate-float-delay"></div>
      </div>

      <button onClick={toggleTheme} className="absolute top-4 right-4 p-3 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full transition-all backdrop-blur-sm">
        {darkMode ? <Sun className="text-white" size={24} /> : <Moon className="text-white" size={24} />}
      </button>

      <div className="w-full max-w-md relative z-10">
        <div style={{ backgroundColor: theme.card }} className="rounded-2xl shadow-2xl p-8 backdrop-blur-xl">
          <div className="text-center mb-8">
            <div style={{ background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 100%)` }} className="w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg transform hover:scale-105 transition-transform">
              <Zap className="text-white" size={40} />
            </div>
            <h1 style={{ color: theme.text }} className="text-3xl font-bold mb-2">Smart Education</h1>
            <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">AI-Powered Scheduling & Classroom Management</p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Email Address</label>
              <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:border-transparent transition-all" placeholder="your@email.com" required />
            </div>
            
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Password</label>
              <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:border-transparent transition-all" placeholder="Enter password" required />
            </div>
            
            <button type="submit" disabled={loading} style={{ background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 100%)` }} className="w-full text-white py-3 rounded-lg font-semibold hover:opacity-90 transition-opacity disabled:opacity-50 shadow-lg">
              {loading ? 'Signing in...' : 'Sign In'}
            </button>
          </form>

          <div style={{ backgroundColor: theme.background, borderColor: theme.border }} className="mt-6 p-4 rounded-lg text-sm border-2">
            <p style={{ color: theme.text }} className="font-semibold mb-3 flex items-center gap-2">
              <Zap size={16} />
              Demo Credentials
            </p>
            <div style={{ color: theme.text, opacity: 0.8 }} className="space-y-2 text-xs">
              <div className="mb-3">
                <p className="font-bold mb-1">Admin:</p>
                <p>admin@school.com / admin123</p>
              </div>
              <div className="mb-3">
                <p className="font-bold mb-1">Faculty (All 8):</p>
                <p>lakshmi@school.com / faculty123</p>
                <p>bhaskar@school.com / faculty123</p>
                <p>swarna@school.com / faculty123</p>
                <p>sreekanth@school.com / faculty123</p>
                <p>anil@school.com / faculty123</p>
                <p>ayesha@school.com / faculty123</p>
                <p>ramesh@school.com / faculty123</p>
                <p>geeta@school.com / faculty123</p>
              </div>
              <div>
                <p className="font-bold mb-1">Students (All 10):</p>
                <p>21CS001@school.com to 21CS010@school.com / student123</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Dashboard View
const DashboardView = ({ setCurrentView }) => {
  const { user, timetable, bookings, announcements, theme, generateAITimetable, loading, detectConflicts, showNotification } = useAppContext();
  
  const today = new Date().toLocaleDateString('en-US', { weekday: 'long' });
  const todayClasses = timetable.filter(slot => slot.day === today);
  const conflicts = detectConflicts();
  const upcomingBookings = bookings.filter(b => new Date(b.date) >= new Date());

  // 🎉 NEW: Export Dashboard Report Function
  const exportDashboardReport = () => {
    const report = `
DASHBOARD REPORT
================
Date: ${new Date().toLocaleString()}

STATISTICS:
- Total Classes: ${timetable.length}
- Today's Classes: ${todayClasses.length}
- Active Bookings: ${upcomingBookings.length}
- Announcements: ${announcements.length}
- Conflicts: ${conflicts.length}

ROOM UTILIZATION:
 ${Object.entries(timetable.reduce((acc, t) => {
  acc[t.room] = (acc[t.room] || 0) + 1;
  return acc;
}, {})).map(([room, count]) => `- ${room}: ${count} classes`).join('\n')}

Generated by Smart Education System
    `.trim();
    
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `dashboard-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('✅ Report exported successfully!', 'success');
  };

  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatCard title="Today's Classes" value={todayClasses.length} icon={<Calendar />} color={theme.primary} theme={theme} trend="+2 from yesterday" />
        <StatCard title="Total Schedule" value={timetable.length} icon={<Book />} color={theme.secondary} theme={theme} trend="Zero conflicts" />
        <StatCard title="Active Bookings" value={upcomingBookings.length} icon={<MapPin />} color={theme.accent} theme={theme} trend="3 pending approval" />
        <StatCard title="Announcements" value={announcements.length} icon={<Bell />} color={theme.warning} theme={theme} trend="2 high priority" />
      </div>

      {/* Quick Actions */}
      {user.role === 'admin' && (
        <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
          <h3 style={{ color: theme.text }} className="text-xl font-bold mb-4 flex items-center gap-2">
            <Zap size={24} style={{ color: theme.primary }} />
            AI Quick Actions
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button 
              onClick={generateAITimetable} 
              disabled={loading} 
              style={{ 
                background: `linear-gradient(135deg, ${theme.secondary} 0%, ${theme.accent} 100%)`,
                boxShadow: `0 4px 12px ${theme.secondary}40`,
                color: 'white'
              }} 
              className="p-6 rounded-xl hover:opacity-90 transition-all group transform hover:scale-105 disabled:opacity-50"
            >
              <RefreshCw className={`mx-auto mb-3 group-hover:rotate-180 transition-transform duration-500 ${loading ? 'animate-spin' : ''}`} size={32} />
              <p className="font-bold text-sm text-white">{loading ? 'Generating...' : 'Generate AI Schedule'}</p>
              <p className="text-xs mt-1 text-white opacity-90">Conflict-free timetable</p>
            </button>

            <button 
              onClick={() => setCurrentView('analytics')}
              style={{ 
                background: `linear-gradient(135deg, ${theme.secondary} 0%, ${theme.accent} 100%)`,
                boxShadow: `0 4px 12px ${theme.secondary}40`,
                color: 'white'
              }} 
              className="p-6 rounded-xl hover:opacity-90 transition-all group transform hover:scale-105"
            >
              <BarChart3 className="mx-auto mb-3 group-hover:scale-110 transition-transform text-white" size={32} />
              <p className="font-bold text-sm text-white">View Analytics</p>
              <p className="text-xs mt-1 text-white opacity-90">Room utilization & stats</p>
            </button>

            <button 
              onClick={exportDashboardReport}
              style={{ 
                background: `linear-gradient(135deg, ${theme.secondary} 0%, ${theme.accent} 100%)`,
                boxShadow: `0 4px 12px ${theme.secondary}40`,
                color: 'white'
              }} 
              className="p-6 rounded-xl hover:opacity-90 transition-all group transform hover:scale-105"
            >
              <Download className="mx-auto mb-3 group-hover:translate-y-1 transition-transform text-white" size={32} />
              <p className="font-bold text-sm text-white">Export Reports</p>
              <p className="text-xs mt-1 text-white opacity-90">TXT format</p>
            </button>
          </div>
        </div>
      )}

      {/* Conflicts Alert */}
      {conflicts.length > 0 && user.role === 'admin' && (
        <div style={{ backgroundColor: theme.danger, color: 'white' }} className="rounded-xl shadow-lg p-6">
          <div className="flex items-start gap-3">
            <AlertTriangle size={24} className="flex-shrink-0 mt-1" />
            <div>
              <h4 className="font-bold text-lg mb-2">⚠️ {conflicts.length} Conflicts Detected!</h4>
              <p className="text-sm opacity-90 mb-3">Your timetable has scheduling conflicts that need attention.</p>
              <button onClick={() => setCurrentView('analytics')} className="px-4 py-2 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-lg text-sm font-medium transition-all">
                View & Resolve Conflicts
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Today's Schedule */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h3 style={{ color: theme.text }} className="text-xl font-bold mb-4 flex items-center gap-2">
          <Clock size={24} style={{ color: theme.primary }} />
          Today's Schedule - {today}
        </h3>
        {todayClasses.length > 0 ? (
          <div className="space-y-3">
            {todayClasses.slice(0, 5).map(slot => (
              <div key={slot.id} style={{ backgroundColor: theme.background, borderLeft: `4px solid ${theme.primary}` }} className="p-4 rounded-lg hover:shadow-md transition-all cursor-pointer">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <h4 style={{ color: theme.text }} className="font-bold text-lg">{slot.subject}</h4>
                    <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm mt-1">
                      {slot.faculty} • {slot.room}
                    </p>
                  </div>
                  <div className="text-right">
                    <p style={{ color: theme.primary }} className="font-bold text-lg">{slot.timeSlot}</p>
                    <span style={{ backgroundColor: theme.success }} className="text-xs px-3 py-1 rounded-full text-white font-medium inline-block mt-2">
                      Active
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <Calendar size={48} style={{ color: theme.border }} className="mx-auto mb-4" />
            <p style={{ color: theme.text, opacity: 0.5 }}>No classes scheduled for today</p>
          </div>
        )}
      </div>

      {/* Recent Announcements */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h3 style={{ color: theme.text }} className="text-xl font-bold mb-4 flex items-center gap-2">
          <Bell size={24} style={{ color: theme.warning }} />
          Recent Announcements
        </h3>
        {announcements.length > 0 ? (
          <div className="space-y-3">
            {announcements.slice(0, 3).map(ann => (
              <div key={ann.id} style={{ backgroundColor: theme.background, borderLeft: `4px solid ${ann.priority === 'high' ? theme.danger : ann.priority === 'medium' ? theme.warning : theme.success}` }} className="p-4 rounded-lg">
                <div className="flex justify-between items-start mb-2">
                  <h4 style={{ color: theme.text }} className="font-bold">{ann.title}</h4>
                  <span style={{ backgroundColor: ann.priority === 'high' ? theme.danger : ann.priority === 'medium' ? theme.warning : theme.success }} className="text-xs px-2 py-1 rounded text-white uppercase font-medium">
                    {ann.priority}
                  </span>
                </div>
                <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">{ann.message}</p>
              </div>
            ))}
          </div>
        ) : (
          <p style={{ color: theme.text, opacity: 0.5 }} className="text-center py-8">No announcements yet</p>
        )}
      </div>
    </div>
  );
};

const StatCard = ({ title, value, icon, color, theme, trend }) => (
  <div 
    style={{ 
      backgroundColor: theme.card, 
      borderColor: color + '30',
      borderWidth: '2px',
      boxShadow: `0 4px 12px ${color}20`
    }} 
    className="rounded-xl shadow-lg p-6 hover:shadow-2xl transition-all cursor-pointer group border-2 transform hover:scale-105"
  >
    <div className="flex items-center justify-between mb-3">
      <div 
        style={{ 
          backgroundColor: color, 
          opacity: 0.15,
          boxShadow: `0 0 20px ${color}40`
        }} 
        className="w-12 h-12 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform"
      >
        <div style={{ color: color, opacity: 1 }}>{icon}</div>
      </div>
      <div 
        style={{ 
          color: color, 
          backgroundColor: color + '15',
          borderColor: color + '30'
        }} 
        className="px-3 py-1 rounded-full text-xs font-medium border"
      >
        {trend}
      </div>
    </div>
    <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm font-medium">{title}</p>
    <p style={{ color: theme.text }} className="text-3xl font-bold mt-2">{value}</p>
  </div>
);

// About View
const AboutView = () => {
  const { theme } = useAppContext();

  return (
    <div className="space-y-6">
      {/* Hero Section */}
      <div 
        style={{ 
          background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 50%, ${theme.accent} 100%)`,
          position: 'relative',
          overflow: 'hidden'
        }} 
        className="rounded-xl shadow-2xl p-8 md:p-12 text-white"
      >
        <div className="relative z-10">
          <h1 className="text-4xl md:text-5xl font-bold mb-4">About Smart Education</h1>
          <p className="text-lg md:text-xl opacity-90 max-w-3xl">
            Revolutionizing educational management with AI-powered scheduling, smart classroom allocation, and comprehensive analytics. Built by passionate developers for the future of education.
          </p>
        </div>
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          <div style={{ backgroundColor: 'rgba(255,255,255,0.1)' }} className="absolute w-64 h-64 rounded-full -top-32 -right-32 animate-float"></div>
          <div style={{ backgroundColor: 'rgba(255,255,255,0.1)' }} className="absolute w-64 h-64 rounded-full -bottom-32 -left-32 animate-float-delay"></div>
        </div>
      </div>

      {/* Key Features */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h2 style={{ color: theme.text }} className="text-2xl font-bold mb-6">Key Features</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className="flex gap-4">
            <div style={{ backgroundColor: theme.primary, color: 'white' }} className="w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0">
              <Zap size={24} />
            </div>
            <div>
              <h3 style={{ color: theme.text }} className="font-bold mb-2">AI-Powered Scheduling</h3>
              <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">Intelligent timetable generation with conflict detection and resolution</p>
            </div>
          </div>
          <div className="flex gap-4">
            <div style={{ backgroundColor: theme.secondary, color: 'white' }} className="w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0">
              <MapPin size={24} />
            </div>
            <div>
              <h3 style={{ color: theme.text }} className="font-bold mb-2">Smart Classroom Management</h3>
              <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">Efficient room allocation and booking system</p>
            </div>
          </div>
          <div className="flex gap-4">
            <div style={{ backgroundColor: theme.accent, color: 'white' }} className="w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0">
              <BarChart3 size={24} />
            </div>
            <div>
              <h3 style={{ color: theme.text }} className="font-bold mb-2">Real-time Analytics</h3>
              <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">Comprehensive insights and reporting dashboard</p>
            </div>
          </div>
          <div className="flex gap-4">
            <div style={{ backgroundColor: theme.success, color: 'white' }} className="w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0">
              <Check size={24} />
            </div>
            <div>
              <h3 style={{ color: theme.text }} className="font-bold mb-2">Attendance Tracking</h3>
              <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">Digital attendance management with detailed reports</p>
            </div>
          </div>
          <div className="flex gap-4">
            <div style={{ backgroundColor: theme.warning, color: 'white' }} className="w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0">
              <Award size={24} />
            </div>
            <div>
              <h3 style={{ color: theme.text }} className="font-bold mb-2">Grade Management</h3>
              <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">Streamlined grade upload and student performance tracking</p>
            </div>
          </div>
          <div className="flex gap-4">
            <div style={{ backgroundColor: theme.danger, color: 'white' }} className="w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0">
              <Bell size={24} />
            </div>
            <div>
              <h3 style={{ color: theme.text }} className="font-bold mb-2">Announcement System</h3>
              <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">Instant communication with priority-based notifications</p>
            </div>
          </div>
        </div>
      </div>

      {/* Team Section */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h2 style={{ color: theme.text }} className="text-2xl font-bold mb-6">Meet Our Team</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {TEAM_MEMBERS.map(member => (
            <div 
              key={member.id} 
              style={{ backgroundColor: theme.background }} 
              className="rounded-xl p-6 hover:shadow-xl transition-all group cursor-pointer transform hover:scale-105"
            >
              <div className="flex flex-col items-center text-center">
                {/* Avatar with initials */}
                <div 
                  style={{ 
                    background: `linear-gradient(135deg, ${member.color} 0%, ${member.color}80 100%)`,
                    boxShadow: `0 8px 24px ${member.color}40`
                  }} 
                  className="w-20 h-20 rounded-full flex items-center justify-center text-white font-bold text-2xl mb-4 group-hover:scale-110 transition-transform"
                >
                  {member.initials}
                </div>
                
                <h3 style={{ color: theme.text }} className="font-bold text-lg mb-1">{member.name}</h3>
                <p style={{ color: theme.primary }} className="text-sm font-medium mb-3">{member.role}</p>
                <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm mb-4">{member.description}</p>
                
                {/* Social Links */}
                <div className="flex gap-3">
                  <a 
                    href={member.github} 
                    style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }}
                    className="w-10 h-10 rounded-full flex items-center justify-center border hover:bg-opacity-80 transition-all group"
                  >
                    <Github size={18} className="group-hover:scale-110 transition-transform" />
                  </a>
                  <a 
                    href={member.linkedin} 
                    style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }}
                    className="w-10 h-10 rounded-full flex items-center justify-center border hover:bg-opacity-80 transition-all group"
                  >
                    <Linkedin size={18} className="group-hover:scale-110 transition-transform" />
                  </a>
                  <a 
                    href={`mailto:${member.email}`} 
                    style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }}
                    className="w-10 h-10 rounded-full flex items-center justify-center border hover:bg-opacity-80 transition-all group"
                  >
                    <Mail size={18} className="group-hover:scale-110 transition-transform" />
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Technology Stack */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h2 style={{ color: theme.text }} className="text-2xl font-bold mb-6">Technology Stack</h2>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div style={{ backgroundColor: theme.background }} className="p-4 rounded-lg text-center">
            <Code size={32} style={{ color: theme.primary }} className="mx-auto mb-2" />
            <p style={{ color: theme.text }} className="font-medium">React.js</p>
          </div>
          <div style={{ backgroundColor: theme.background }} className="p-4 rounded-lg text-center">
            <Lightbulb size={32} style={{ color: theme.secondary }} className="mx-auto mb-2" />
            <p style={{ color: theme.text }} className="font-medium">AI/ML</p>
          </div>
          <div style={{ backgroundColor: theme.background }} className="p-4 rounded-lg text-center">
            <Shield size={32} style={{ color: theme.success }} className="mx-auto mb-2" />
            <p style={{ color: theme.text }} className="font-medium">Secure Auth</p>
          </div>
          <div style={{ backgroundColor: theme.background }} className="p-4 rounded-lg text-center">
            <Globe size={32} style={{ color: theme.accent }} className="mx-auto mb-2" />
            <p style={{ color: theme.text }} className="font-medium">Responsive</p>
          </div>
        </div>
      </div>

      {/* Project Info */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h2 style={{ color: theme.text }} className="text-2xl font-bold mb-4">Project Information</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 style={{ color: theme.text }} className="font-bold mb-2">Version</h3>
            <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">Smart Education v2.0 - Hackathon Edition</p>
          </div>
          <div>
            <h3 style={{ color: theme.text }} className="font-bold mb-2">Status</h3>
            <p style={{ color: theme.success }} className="text-sm font-medium">● All Systems Operational</p>
          </div>
          <div>
            <h3 style={{ color: theme.text }} className="font-bold mb-2">Last Updated</h3>
            <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">{new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
          </div>
          <div>
            <h3 style={{ color: theme.text }} className="font-bold mb-2">Support</h3>
            <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">support@smarteducation.com</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Timetable View with FIXED hover styles
const TimetableView = () => {
  const { timetable, theme, user, setTimetable, showNotification, generateAITimetable, loading, detectConflicts } = useAppContext();
  const [selectedDay, setSelectedDay] = useState('All');
  const [viewMode, setViewMode] = useState('table');
  const [searchQuery, setSearchQuery] = useState('');
  const [filterFaculty, setFilterFaculty] = useState('All');
  const [filterRoom, setFilterRoom] = useState('All');
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingId, setEditingId] = useState(null);
  const [formData, setFormData] = useState({
    subject: '',
    faculty: '',
    day: '',
    timeSlot: '',
    room: '',
    classSection: 'CS-A'
  });

  // 🎉 UPDATED: Advanced filtering logic
  const filteredTimetable = timetable.filter(slot => {
    const matchesDay = selectedDay === 'All' || slot.day === selectedDay;
    const matchesFaculty = filterFaculty === 'All' || slot.faculty === filterFaculty;
    const matchesRoom = filterRoom === 'All' || slot.room === filterRoom;
    return matchesDay && matchesFaculty && matchesRoom;
  });

  const searchedTimetable = searchQuery
    ? filteredTimetable.filter(slot => 
        slot.subject.toLowerCase().includes(searchQuery.toLowerCase()) ||
        slot.faculty.toLowerCase().includes(searchQuery.toLowerCase()) ||
        slot.room.toLowerCase().includes(searchQuery.toLowerCase())
      )
    : filteredTimetable;

  const conflicts = detectConflicts();

  // 🎉 NEW: Export timetable function
  const exportTimetable = () => {
    const doc = `
TIMETABLE EXPORT
================
Total Classes: ${timetable.length}
Generated: ${new Date().toLocaleString()}

 ${timetable.map(slot => 
  `${slot.day} | ${slot.timeSlot} | ${slot.subject} | ${slot.faculty} | ${slot.room}`
).join('\n')}
    `.trim();
    
    const blob = new Blob([doc], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `timetable-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('✅ Timetable exported successfully!', 'success');
  };

  const handleDelete = (id) => {
    if (window.confirm('Delete this class?')) {
      setTimetable(timetable.filter(t => t.id !== id));
      showNotification('✅ Class deleted', 'success');
    }
  };

  const handleAddClass = (e) => {
    e.preventDefault();
    
    const conflict = timetable.find(t => 
      (t.room === formData.room || t.faculty === formData.faculty) &&
      t.day === formData.day &&
      t.timeSlot === formData.timeSlot
    );

    if (conflict) {
      showNotification('⚠️ Conflict: Room or faculty already occupied at this time!', 'warning');
      return;
    }

    const facultyData = FACULTY_SUBJECTS.find(f => f.faculty === formData.faculty);
    
    const newClass = {
      id: `TT-${Date.now()}`,
      subject: formData.subject,
      subjectCode: facultyData?.code || 'CS000',
      faculty: formData.faculty,
      facultyId: facultyData?.id || 'F0',
      day: formData.day,
      timeSlot: formData.timeSlot,
      room: formData.room,
      roomId: CLASSROOMS.find(r => r.name === formData.room)?.id || 'R0',
      classSection: formData.classSection,
      status: 'active',
      type: 'regular'
    };

    setTimetable([...timetable, newClass]);
    showNotification('✅ Class added successfully!', 'success');
    setShowAddForm(false);
    setFormData({ subject: '', faculty: '', day: '', timeSlot: '', room: '', classSection: 'CS-A' });
  };

  const handleEdit = (slot) => {
    setEditingId(slot.id);
    setFormData({
      subject: slot.subject,
      faculty: slot.faculty,
      day: slot.day,
      timeSlot: slot.timeSlot,
      room: slot.room,
      classSection: slot.classSection
    });
    setShowAddForm(true);
  };

  const handleUpdate = (e) => {
    e.preventDefault();
    
    const conflict = timetable.find(t => 
      t.id !== editingId &&
      (t.room === formData.room || t.faculty === formData.faculty) &&
      t.day === formData.day &&
      t.timeSlot === formData.timeSlot
    );

    if (conflict) {
      showNotification('⚠️ Conflict: Room or faculty already occupied at this time!', 'warning');
      return;
    }

    const facultyData = FACULTY_SUBJECTS.find(f => f.faculty === formData.faculty);
    
    const updatedClass = {
      id: editingId,
      subject: formData.subject,
      subjectCode: facultyData?.code || 'CS000',
      faculty: formData.faculty,
      facultyId: facultyData?.id || 'F0',
      day: formData.day,
      timeSlot: formData.timeSlot,
      room: formData.room,
      roomId: CLASSROOMS.find(r => r.name === formData.room)?.id || 'R0',
      classSection: formData.classSection,
      status: 'active',
      type: 'regular'
    };

    setTimetable(timetable.map(t => t.id === editingId ? updatedClass : t));
    showNotification('✅ Class updated successfully!', 'success');
    setShowAddForm(false);
    setEditingId(null);
    setFormData({ subject: '', faculty: '', day: '', timeSlot: '', room: '', classSection: 'CS-A' });
  };

  const handleCancelEdit = () => {
    setEditingId(null);
    setShowAddForm(false);
    setFormData({ subject: '', faculty: '', day: '', timeSlot: '', room: '', classSection: 'CS-A' });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div style={{ backgroundColor: theme.card, borderColor: theme.primary + '20' }} className="rounded-xl shadow-lg p-6 border-2 no-print">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
            <h3 style={{ color: theme.text }} className="text-2xl font-bold flex items-center gap-2">
              <Calendar size={28} style={{ color: theme.primary }} />
              Smart Timetable Scheduler
            </h3>
            <p style={{ color: theme.text, opacity: 0.6 }} className="text-sm mt-1">
              {timetable.length} classes scheduled • {conflicts.length} conflicts
            </p>
          </div>
          {user.role === 'admin' && (
            <div className="flex gap-2 flex-wrap">
              <button 
                onClick={() => setShowAddForm(!showAddForm)} 
                style={{ 
                  backgroundColor: theme.success, 
                  boxShadow: `0 4px 12px ${theme.success}40`,
                  backgroundImage: `linear-gradient(135deg, ${theme.success} 0%, #059669 100%)`
                }} 
                className="px-6 py-3 text-white rounded-lg hover:opacity-90 flex items-center gap-2 font-bold transition-all transform hover:scale-105"
              >
                <Plus size={20} />
                {showAddForm ? 'Cancel' : 'Add Class'}
              </button>
              <button 
                onClick={generateAITimetable} 
                disabled={loading} 
                style={{ 
                  backgroundColor: theme.primary, 
                  boxShadow: `0 4px 12px ${theme.primary}40`,
                  backgroundImage: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 100%)`
                }} 
                className="px-6 py-3 text-white rounded-lg hover:opacity-90 flex items-center gap-2 font-bold transition-all disabled:opacity-50 transform hover:scale-105"
              >
                <RefreshCw size={20} className={loading ? 'animate-spin' : ''} />
                {loading ? 'Generating...' : 'AI Generate'}
              </button>
              <button 
                onClick={exportTimetable}
                style={{ 
                  backgroundColor: theme.accent, 
                  boxShadow: `0 4px 12px ${theme.accent}40`,
                  backgroundImage: `linear-gradient(135deg, ${theme.accent} 0%, #DB2777 100%)`
                }} 
                className="px-6 py-3 text-white rounded-lg hover:opacity-90 flex items-center gap-2 font-bold transition-all transform hover:scale-105"
              >
                <Download size={20} />
                Export
              </button>
              <button 
                onClick={() => window.print()}
                style={{ 
                  backgroundColor: theme.secondary, 
                  boxShadow: `0 4px 12px ${theme.secondary}40`,
                  backgroundImage: `linear-gradient(135deg, ${theme.secondary} 0%, ${theme.primary} 100%)`
                }} 
                className="px-6 py-3 text-white rounded-lg hover:opacity-90 flex items-center gap-2 font-bold transition-all transform hover:scale-105"
              >
                <Printer size={20} />
                Print
              </button>
            </div>
          )}
        </div>

        {/* Add/Edit Class Form */}
        {showAddForm && user.role === 'admin' && (
          <div style={{ backgroundColor: theme.background, borderColor: theme.border }} className="mt-6 p-6 rounded-xl border-2">
            <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">
              {editingId ? 'Edit Class' : 'Add New Class'}
            </h4>
            <form onSubmit={editingId ? handleUpdate : handleAddClass} className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Subject</label>
                <select 
                  value={formData.subject} 
                  onChange={(e) => {
                    const faculty = FACULTY_SUBJECTS.find(f => f.subject === e.target.value);
                    setFormData({...formData, subject: e.target.value, faculty: faculty?.faculty || ''});
                  }}
                  style={{ backgroundColor: theme.card, color: theme.text, borderColor: theme.border }} 
                  className="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-offset-0" 
                  required
                >
                  <option value="">Select Subject</option>
                  {FACULTY_SUBJECTS.map(f => (
                    <option key={f.id} value={f.subject}>{f.subject} ({f.code})</option>
                  ))}
                </select>
              </div>
              <div>
                <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Faculty</label>
                <input 
                  type="text" 
                  value={formData.faculty} 
                  readOnly
                  style={{ backgroundColor: theme.card, color: theme.text, borderColor: theme.border }} 
                  className="w-full px-4 py-3 border rounded-lg" 
                  placeholder="Auto-filled"
                />
              </div>
              <div>
                <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Day</label>
                <select 
                  value={formData.day} 
                  onChange={(e) => setFormData({...formData, day: e.target.value})}
                  style={{ backgroundColor: theme.card, color: theme.text, borderColor: theme.border }} 
                  className="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-offset-0" 
                  required
                >
                  <option value="">Select Day</option>
                  {DAYS.map(day => (
                    <option key={day} value={day}>{day}</option>
                  ))}
                </select>
              </div>
              <div>
                <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Time Slot</label>
                <select 
                  value={formData.timeSlot} 
                  onChange={(e) => setFormData({...formData, timeSlot: e.target.value})}
                  style={{ backgroundColor: theme.card, color: theme.text, borderColor: theme.border }} 
                  className="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-offset-0" 
                  required
                >
                  <option value="">Select Time</option>
                  {TIME_SLOTS.map(slot => (
                    <option key={slot} value={slot}>{slot}</option>
                  ))}
                </select>
              </div>
              <div>
                <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Room</label>
                <select 
                  value={formData.room} 
                  onChange={(e) => setFormData({...formData, room: e.target.value})}
                  style={{ backgroundColor: theme.card, color: theme.text, borderColor: theme.border }} 
                  className="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-offset-0" 
                  required
                >
                  <option value="">Select Room</option>
                  {CLASSROOMS.map(room => (
                    <option key={room.id} value={room.name}>{room.name} ({room.type})</option>
                  ))}
                </select>
              </div>
              <div className="flex items-end gap-2">
                <button 
                  type="submit" 
                  style={{ 
                    backgroundColor: editingId ? theme.success : theme.primary, 
                    boxShadow: `0 4px 12px ${editingId ? theme.success : theme.primary}40` 
                  }} 
                  className="flex-1 px-4 py-3 text-white rounded-lg hover:opacity-90 font-semibold transition-all transform hover:scale-105"
                >
                  {editingId ? 'Update Class' : 'Add Class'}
                </button>
                {editingId && (
                  <button 
                    type="button"
                    onClick={handleCancelEdit}
                    style={{ backgroundColor: theme.danger, boxShadow: `0 4px 12px ${theme.danger}40` }} 
                    className="px-4 py-3 text-white rounded-lg hover:opacity-90 font-semibold transition-all"
                  >
                    Cancel
                  </button>
                )}
              </div>
            </form>
          </div>
        )}

        {/* 🎉 NEW: Advanced Search & Filters */}
        <div className="mt-6 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="relative">
              <Search size={20} style={{ color: theme.text, opacity: 0.4 }} className="absolute left-3 top-1/2 transform -translate-y-1/2" />
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search by subject, faculty, or room..."
                style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }}
                className="w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 transition-all"
              />
            </div>
            
            <select
              value={filterFaculty}
              onChange={(e) => setFilterFaculty(e.target.value)}
              style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }}
              className="px-4 py-3 border rounded-lg focus:ring-2 transition-all"
            >
              <option value="All">All Faculty</option>
              {FACULTY_SUBJECTS.map(f => (
                <option key={f.id} value={f.faculty}>{f.faculty}</option>
              ))}
            </select>
            
            <select
              value={filterRoom}
              onChange={(e) => setFilterRoom(e.target.value)}
              style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }}
              className="px-4 py-3 border rounded-lg focus:ring-2 transition-all"
            >
              <option value="All">All Rooms</option>
              {CLASSROOMS.map(r => (
                <option key={r.id} value={r.name}>{r.name}</option>
              ))}
            </select>
          </div>
          
          <div className="flex gap-2">
            <button onClick={() => setViewMode('table')} style={{ backgroundColor: viewMode === 'table' ? theme.primary : theme.background, color: viewMode === 'table' ? 'white' : theme.text }} className="flex-1 px-4 py-3 rounded-lg font-medium transition-all flex items-center justify-center gap-2">
              <List size={18} />
              Table
            </button>
            <button onClick={() => setViewMode('grid')} style={{ backgroundColor: viewMode === 'grid' ? theme.primary : theme.background, color: viewMode === 'grid' ? 'white' : theme.text }} className="flex-1 px-4 py-3 rounded-lg font-medium transition-all flex items-center justify-center gap-2">
              <Grid size={18} />
              Calendar
            </button>
          </div>
        </div>
      </div>

      {/* Day Filter */}
      <div className="flex gap-2 overflow-x-auto pb-2 no-print">
        {['All', ...DAYS].map(day => (
          <button
            key={day}
            onClick={() => setSelectedDay(day)}
            style={{ 
              backgroundColor: selectedDay === day ? theme.primary : theme.card,
              color: selectedDay === day ? 'white' : theme.text,
              borderColor: theme.border
            }}
            className="px-6 py-3 rounded-lg whitespace-nowrap transition-all font-medium hover:shadow-lg border"
          >
            {day}
          </button>
        ))}
      </div>

      {/* Timetable Content */}
      <div className="timetable-print">
        {loading ? (
          <LoadingSkeleton theme={theme} />
        ) : viewMode === 'table' ? (
          <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead style={{ backgroundColor: theme.background }}>
                  <tr>
                    <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Subject</th>
                    <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Faculty</th>
                    <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Day</th>
                    <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Time</th>
                    <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Room</th>
                    <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Status</th>
                    {user.role === 'admin' && (
                      <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold no-print">Actions</th>
                    )}
                  </tr>
                </thead>
                <tbody>
                  {searchedTimetable.map(slot => (
                    <tr 
                      key={slot.id} 
                      style={{ borderTop: `1px solid ${theme.border}` }} 
                      className="transition-all cursor-pointer"
                      onMouseEnter={(e) => {
                        e.currentTarget.style.backgroundColor = theme.primary + '15';
                        // Fix text color on hover
                        e.currentTarget.querySelectorAll('td').forEach(cell => {
                          cell.style.color = theme.text;
                          cell.style.fontWeight = '500';
                        });
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.backgroundColor = 'transparent';
                        // Reset text color
                        e.currentTarget.querySelectorAll('td').forEach(cell => {
                          cell.style.color = '';
                          cell.style.fontWeight = '';
                        });
                      }}
                    >
                      <td style={{ color: theme.text }} className="px-6 py-4 font-bold">{slot.subject}</td>
                      <td style={{ color: theme.text, opacity: 0.8 }} className="px-6 py-4">{slot.faculty}</td>
                      <td style={{ color: theme.text, opacity: 0.8 }} className="px-6 py-4">{slot.day}</td>
                      <td style={{ color: theme.primary }} className="px-6 py-4 font-medium">{slot.timeSlot}</td>
                      <td style={{ color: theme.text, opacity: 0.8 }} className="px-6 py-4">{slot.room}</td>
                      <td className="px-6 py-4">
                        <span style={{ backgroundColor: theme.success }} className="px-3 py-1 rounded-full text-xs font-medium text-white">
                          {slot.status}
                        </span>
                      </td>
                      {user.role === 'admin' && (
                        <td className="px-6 py-4 no-print">
                          <div className="flex items-center gap-2">
                            <button 
                              onClick={() => handleEdit(slot)} 
                              style={{ color: theme.primary, backgroundColor: 'transparent' }} 
                              className="p-2 rounded-lg transition-all"
                              onMouseEnter={(e) => e.currentTarget.style.backgroundColor = theme.primary + '20'}
                              onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                            >
                              <Edit2 size={18} />
                            </button>
                            <button 
                              onClick={() => handleDelete(slot.id)} 
                              style={{ color: theme.danger, backgroundColor: 'transparent' }} 
                              className="p-2 rounded-lg transition-all"
                              onMouseEnter={(e) => e.currentTarget.style.backgroundColor = theme.danger + '20'}
                              onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                            >
                              <Trash2 size={18} />
                            </button>
                          </div>
                        </td>
                      )}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {searchedTimetable.length === 0 && (
              <div className="text-center py-12">
                <Calendar size={48} style={{ color: theme.border }} className="mx-auto mb-4" />
                <p style={{ color: theme.text, opacity: 0.5 }}>No classes found</p>
              </div>
            )}
          </div>
        ) : (
          <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
            <div className="grid grid-cols-1 gap-4">
              {DAYS.map(day => {
                const dayClasses = searchedTimetable.filter(t => t.day === day);
                return (
                  <div key={day} style={{ borderColor: theme.border }} className="border rounded-lg p-4">
                    <h4 style={{ color: theme.text }} className="font-bold text-lg mb-3">{day}</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                      {dayClasses.map(slot => (
                        <div 
                          key={slot.id} 
                          style={{ 
                            backgroundColor: theme.background, 
                            borderLeft: `4px solid ${theme.primary}`,
                            boxShadow: `0 2px 8px ${theme.primary}20`
                          }} 
                          className="p-4 rounded-lg transition-all"
                          onMouseEnter={(e) => {
                            e.currentTarget.style.backgroundColor = theme.primary + '15';
                            e.currentTarget.style.transform = 'translateY(-2px)';
                            e.currentTarget.style.boxShadow = `0 4px 12px ${theme.primary}30`;
                            // Fix text color on hover
                            e.currentTarget.querySelectorAll('p').forEach(p => {
                              p.style.color = theme.text;
                              p.style.fontWeight = '500';
                            });
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.backgroundColor = theme.background;
                            e.currentTarget.style.transform = 'translateY(0)';
                            e.currentTarget.style.boxShadow = `0 2px 8px ${theme.primary}20`;
                            // Reset text color
                            e.currentTarget.querySelectorAll('p').forEach(p => {
                              p.style.color = '';
                              p.style.fontWeight = '';
                            });
                          }}
                        >
                          <div className="flex justify-between items-start mb-2">
                            <p style={{ color: theme.primary }} className="font-bold text-sm">{slot.timeSlot}</p>
                            {user.role === 'admin' && (
                              <div className="flex gap-1 no-print">
                                <button 
                                  onClick={() => handleEdit(slot)} 
                                  style={{ color: theme.primary, backgroundColor: theme.primary + '20' }} 
                                  className="p-1 rounded hover:opacity-80 transition-all"
                                >
                                  <Edit2 size={14} />
                                </button>
                                <button 
                                  onClick={() => handleDelete(slot.id)} 
                                  style={{ color: theme.danger, backgroundColor: theme.danger + '20' }} 
                                  className="p-1 rounded hover:opacity-80 transition-all"
                                >
                                  <Trash2 size={14} />
                                </button>
                              </div>
                            )}
                          </div>
                          <p style={{ color: theme.text }} className="font-semibold">{slot.subject}</p>
                          <p style={{ color: theme.text, opacity: 0.7 }} className="text-xs mt-1">{slot.faculty}</p>
                          <p style={{ color: theme.text, opacity: 0.7 }} className="text-xs">{slot.room}</p>
                        </div>
                      ))}
                    </div>
                    {dayClasses.length === 0 && (
                      <p style={{ color: theme.text, opacity: 0.5 }} className="text-sm text-center py-4">No classes</p>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Analytics View with REAL CHARTS
const AnalyticsView = () => {
  const { timetable, bookings, theme, detectConflicts } = useAppContext();
  
  const conflicts = detectConflicts();
  const totalClasses = timetable.length;
  
  const roomUsage = {};
  timetable.forEach(slot => {
    roomUsage[slot.room] = (roomUsage[slot.room] || 0) + 1;
  });
  
  const roomUtilization = Object.entries(roomUsage).map(([room, count]) => ({
    room,
    name: room,
    utilization: parseFloat(((count / (DAYS.length * TIME_SLOTS.length)) * 100).toFixed(1)),
    classes: count
  })).sort((a, b) => b.utilization - a.utilization);

  const facultyLoad = {};
  timetable.forEach(slot => {
    facultyLoad[slot.faculty] = (facultyLoad[slot.faculty] || 0) + 1;
  });
  
  const facultyWorkload = Object.entries(facultyLoad).map(([faculty, classes]) => ({
    faculty,
    name: faculty.split(' ').slice(-2).join(' '),
    classes
  })).sort((a, b) => b.classes - a.classes);

  const dayDistribution = DAYS.map(day => ({
    day,
    name: day.substring(0, 3),
    classes: timetable.filter(t => t.day === day).length
  }));

  const CHART_COLORS = [theme.primary, theme.secondary, theme.accent, theme.success, theme.warning, theme.danger];

  return (
    <div className="space-y-6">
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h3 style={{ color: theme.text }} className="text-2xl font-bold flex items-center gap-2 mb-2">
          <BarChart3 size={28} style={{ color: theme.primary }} />
          Analytics Dashboard
        </h3>
        <p style={{ color: theme.text, opacity: 0.6 }} className="text-sm">
          Real-time insights and statistics
        </p>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div style={{ background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 100%)` }} className="rounded-xl shadow-lg p-6 text-white">
          <p className="text-sm opacity-90 mb-2">Total Classes</p>
          <p className="text-4xl font-bold">{totalClasses}</p>
          <p className="text-xs opacity-75 mt-2">Across all days</p>
        </div>
        <div style={{ background: `linear-gradient(135deg, ${theme.success} 0%, #059669 100%)` }} className="rounded-xl shadow-lg p-6 text-white">
          <p className="text-sm opacity-90 mb-2">Conflicts</p>
          <p className="text-4xl font-bold">{conflicts.length}</p>
          <p className="text-xs opacity-75 mt-2">{conflicts.length === 0 ? 'Perfect!' : 'Need attention'}</p>
        </div>
        <div style={{ background: `linear-gradient(135deg, ${theme.accent} 0%, #DB2777 100%)` }} className="rounded-xl shadow-lg p-6 text-white">
          <p className="text-sm opacity-90 mb-2">Active Bookings</p>
          <p className="text-4xl font-bold">{bookings.length}</p>
          <p className="text-xs opacity-75 mt-2">{bookings.filter(b => b.status === 'pending').length} pending</p>
        </div>
        <div style={{ background: `linear-gradient(135deg, ${theme.warning} 0%, #D97706 100%)` }} className="rounded-xl shadow-lg p-6 text-white">
          <p className="text-sm opacity-90 mb-2">Efficiency</p>
          <p className="text-4xl font-bold">94%</p>
          <p className="text-xs opacity-75 mt-2">Resource optimization</p>
        </div>
      </div>

      {/* 🎉 NEW: Room Utilization Chart with Recharts */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h4 style={{ color: theme.text }} className="text-xl font-bold mb-6">Room Utilization</h4>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={roomUtilization}>
            <CartesianGrid strokeDasharray="3 3" stroke={theme.border} />
            <XAxis dataKey="name" stroke={theme.text} />
            <YAxis stroke={theme.text} />
            <Tooltip 
              contentStyle={{ backgroundColor: theme.card, border: `1px solid ${theme.border}`, borderRadius: '8px' }}
              labelStyle={{ color: theme.text }}
            />
            <Bar dataKey="utilization" fill={theme.primary} radius={[8, 8, 0, 0]} />
          </BarChart>
        </ResponsiveContainer>
      </div>

      {/* 🎉 NEW: Faculty Workload Chart */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h4 style={{ color: theme.text }} className="text-xl font-bold mb-6">Faculty Workload</h4>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={facultyWorkload.slice(0, 8)}>
            <CartesianGrid strokeDasharray="3 3" stroke={theme.border} />
            <XAxis dataKey="name" stroke={theme.text} angle={-45} textAnchor="end" height={100} />
            <YAxis stroke={theme.text} />
            <Tooltip 
              contentStyle={{ backgroundColor: theme.card, border: `1px solid ${theme.border}`, borderRadius: '8px' }}
              labelStyle={{ color: theme.text }}
            />
            <Bar dataKey="classes" fill={theme.success} radius={[8, 8, 0, 0]} />
          </BarChart>
        </ResponsiveContainer>
      </div>

      {/* 🎉 NEW: Daily Distribution Line Chart */}
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h4 style={{ color: theme.text }} className="text-xl font-bold mb-6">Weekly Class Distribution</h4>
        <ResponsiveContainer width="100%" height={250}>
          <LineChart data={dayDistribution}>
            <CartesianGrid strokeDasharray="3 3" stroke={theme.border} />
            <XAxis dataKey="name" stroke={theme.text} />
            <YAxis stroke={theme.text} />
            <Tooltip 
              contentStyle={{ backgroundColor: theme.card, border: `1px solid ${theme.border}`, borderRadius: '8px' }}
              labelStyle={{ color: theme.text }}
            />
            <Line type="monotone" dataKey="classes" stroke={theme.accent} strokeWidth={3} dot={{ fill: theme.accent, r: 6 }} />
          </LineChart>
        </ResponsiveContainer>
      </div>

      {/* Conflicts List */}
      {conflicts.length > 0 && (
        <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
          <h4 style={{ color: theme.text }} className="text-xl font-bold mb-4 flex items-center gap-2">
            <AlertTriangle size={24} style={{ color: theme.danger }} />
            Detected Conflicts ({conflicts.length})
          </h4>
          <div className="space-y-3">
            {conflicts.map((conflict, idx) => (
              <div key={idx} style={{ backgroundColor: theme.background, borderLeft: `4px solid ${theme.danger}` }} className="p-4 rounded-lg">
                <p style={{ color: theme.danger }} className="font-bold text-sm mb-1">{conflict.type}</p>
                <p style={{ color: theme.text, opacity: 0.8 }} className="text-sm">{conflict.details}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// Smart Classroom View (unchanged - already working)
const SmartClassroomView = () => {
  const { bookings, theme, setBookings, showNotification, user, timetable } = useAppContext();
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [formData, setFormData] = useState({
    room: '',
    purpose: '',
    date: '',
    timeSlot: '',
    capacity: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    
    const conflict = timetable.find(t => 
      t.room === formData.room &&
      t.day === new Date(formData.date).toLocaleDateString('en-US', { weekday: 'long' }) &&
      t.timeSlot === formData.timeSlot
    );

    if (conflict) {
      showNotification('⚠️ Room is occupied by a scheduled class at this time', 'warning');
      return;
    }

    const newBooking = {
      id: `B${Date.now()}`,
      ...formData,
      roomId: CLASSROOMS.find(r => r.name === formData.room)?.id,
      requestedBy: user.name,
      status: user.role === 'admin' ? 'approved' : 'pending'
    };

    setBookings([...bookings, newBooking]);
    showNotification(`✅ Booking ${user.role === 'admin' ? 'approved' : 'submitted for approval'}!`, 'success');
    setShowBookingForm(false);
    setFormData({ room: '', purpose: '', date: '', timeSlot: '', capacity: '' });
  };

  const handleApprove = (id) => {
    setBookings(bookings.map(b => b.id === id ? { ...b, status: 'approved' } : b));
    showNotification('✅ Booking approved', 'success');
  };

  const handleReject = (id) => {
    setBookings(bookings.filter(b => b.id !== id));
    showNotification('Booking rejected', 'info');
  };

  return (
    <div className="space-y-6">
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
            <h3 style={{ color: theme.text }} className="text-2xl font-bold flex items-center gap-2">
              <MapPin size={28} style={{ color: theme.primary }} />
              Smart Classroom Management
            </h3>
            <p style={{ color: theme.text, opacity: 0.6 }} className="text-sm mt-1">
              {CLASSROOMS.length} rooms • {bookings.filter(b => b.status === 'pending').length} pending approvals
            </p>
          </div>
          <button onClick={() => setShowBookingForm(!showBookingForm)} style={{ backgroundColor: theme.primary }} className="px-6 py-3 text-white rounded-lg hover:opacity-90 flex items-center gap-2 font-medium transition-all">
            <Plus size={20} />
            {showBookingForm ? 'Cancel' : 'New Booking'}
          </button>
        </div>
      </div>

      {showBookingForm && (
        <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
          <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">Book a Classroom</h4>
          <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Select Room</label>
              <select value={formData.room} onChange={(e) => setFormData({...formData, room: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" required>
                <option value="">Choose a room</option>
                {CLASSROOMS.map(room => (
                  <option key={room.id} value={room.name}>{room.name} ({room.type} - {room.capacity} capacity)</option>
                ))}
              </select>
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Purpose</label>
              <input type="text" value={formData.purpose} onChange={(e) => setFormData({...formData, purpose: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" placeholder="e.g., Workshop, Meeting" required />
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Date</label>
              <input type="date" value={formData.date} onChange={(e) => setFormData({...formData, date: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" required />
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Time Slot</label>
              <select value={formData.timeSlot} onChange={(e) => setFormData({...formData, timeSlot: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" required>
                <option value="">Select time</option>
                {TIME_SLOTS.map(slot => (
                  <option key={slot} value={slot}>{slot}</option>
                ))}
              </select>
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Expected Capacity</label>
              <input type="number" value={formData.capacity} onChange={(e) => setFormData({...formData, capacity: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" placeholder="Number of attendees" required />
            </div>
            <div className="flex items-end">
              <button type="submit" style={{ backgroundColor: theme.primary }} className="w-full px-4 py-3 text-white rounded-lg hover:opacity-90 font-semibold transition-all">
                Submit Booking Request
              </button>
            </div>
          </form>
        </div>
      )}

      <div>
        <h4 style={{ color: theme.text }} className="font-bold mb-4">Available Classrooms</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {CLASSROOMS.map(room => (
            <div key={room.id} style={{ backgroundColor: theme.card, borderColor: theme.border }} className="border rounded-xl p-6 hover:shadow-lg transition-all">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h5 style={{ color: theme.text }} className="font-bold text-lg">{room.name}</h5>
                  <p style={{ color: theme.text, opacity: 0.6 }} className="text-sm">{room.building} - Floor {room.floor}</p>
                </div>
                <span style={{ backgroundColor: theme.success }} className="px-3 py-1 rounded-full text-xs font-medium text-white">
                  Available
                </span>
              </div>
              <div className="space-y-2 mb-4">
                <p style={{ color: theme.text }} className="text-sm flex items-center gap-2">
                  <Users size={16} style={{ color: theme.primary }} />
                  Capacity: {room.capacity}
                </p>
                <p style={{ color: theme.text }} className="text-sm flex items-center gap-2">
                  <Book size={16} style={{ color: theme.primary }} />
                  Type: {room.type}
                </p>
              </div>
              <div>
                <p style={{ color: theme.text, opacity: 0.6 }} className="text-xs mb-2">Equipment:</p>
                <div className="flex flex-wrap gap-1">
                  {room.equipment.map((eq, idx) => (
                    <span key={idx} style={{ backgroundColor: theme.background, color: theme.text }} className="text-xs px-2 py-1 rounded">
                      {eq}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">All Bookings</h4>
        {bookings.length > 0 ? (
          <div className="space-y-3">
            {bookings.map(booking => (
              <div key={booking.id} style={{ backgroundColor: theme.background, borderLeft: `4px solid ${booking.status === 'approved' ? theme.success : booking.status === 'pending' ? theme.warning : theme.danger}` }} className="p-4 rounded-lg">
                <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <h5 style={{ color: theme.text }} className="font-bold text-lg">{booking.room}</h5>
                      <span style={{ backgroundColor: booking.status === 'approved' ? theme.success : booking.status === 'pending' ? theme.warning : theme.danger }} className="px-3 py-1 rounded-full text-xs font-medium text-white uppercase">
                        {booking.status}
                      </span>
                    </div>
                    <p style={{ color: theme.text, opacity: 0.8 }} className="text-sm mb-1"><strong>Purpose:</strong> {booking.purpose}</p>
                    <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">
                      {booking.date} • {booking.timeSlot} • Requested by: {booking.requestedBy}
                    </p>
                  </div>
                  {user.role === 'admin' && booking.status === 'pending' && (
                    <div className="flex gap-2">
                      <button onClick={() => handleApprove(booking.id)} style={{ backgroundColor: theme.success }} className="px-4 py-2 text-white rounded-lg hover:opacity-90 text-sm font-medium transition-all">
                        Approve
                      </button>
                      <button onClick={() => handleReject(booking.id)} style={{ backgroundColor: theme.danger }} className="px-4 py-2 text-white rounded-lg hover:opacity-90 text-sm font-medium transition-all">
                        Reject
                      </button>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <MapPin size={48} style={{ color: theme.border }} className="mx-auto mb-4" />
            <p style={{ color: theme.text, opacity: 0.5 }}>No bookings yet</p>
          </div>
        )}
      </div>
    </div>
  );
};

// Announcements View (unchanged - already working)
const AnnouncementsView = () => {
  const { announcements, setAnnouncements, showNotification, theme, user } = useAppContext();
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    message: '',
    priority: 'medium'
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    const newAnnouncement = {
      id: `A${Date.now()}`,
      ...formData,
      createdAt: new Date().toISOString(),
      author: user.name
    };
    setAnnouncements([newAnnouncement, ...announcements]);
    showNotification('✅ Announcement posted successfully!', 'success');
    setFormData({ title: '', message: '', priority: 'medium' });
    setShowForm(false);
  };

  const handleDelete = (id) => {
    if (window.confirm('Delete this announcement?')) {
      setAnnouncements(announcements.filter(a => a.id !== id));
      showNotification('Announcement deleted', 'info');
    }
  };

  return (
    <div className="space-y-6">
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
            <h3 style={{ color: theme.text }} className="text-2xl font-bold flex items-center gap-2">
              <Bell size={28} style={{ color: theme.warning }} />
              Announcements
            </h3>
            <p style={{ color: theme.text, opacity: 0.6 }} className="text-sm mt-1">
              {announcements.length} total announcements
            </p>
          </div>
          {user.role === 'admin' && (
            <button onClick={() => setShowForm(!showForm)} style={{ backgroundColor: theme.primary }} className="px-6 py-3 text-white rounded-lg hover:opacity-90 flex items-center gap-2 font-medium transition-all">
              <Plus size={20} />
              {showForm ? 'Cancel' : 'New Announcement'}
            </button>
          )}
        </div>
      </div>

      {showForm && user.role === 'admin' && (
        <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
          <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">Create Announcement</h4>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Title</label>
              <input type="text" value={formData.title} onChange={(e) => setFormData({...formData, title: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" placeholder="Announcement title" required />
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Message</label>
              <textarea value={formData.message} onChange={(e) => setFormData({...formData, message: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" rows="4" placeholder="Write your message..." required></textarea>
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Priority</label>
              <select value={formData.priority} onChange={(e) => setFormData({...formData, priority: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg">
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
              </select>
            </div>
            <button type="submit" style={{ backgroundColor: theme.primary }} className="w-full px-4 py-3 text-white rounded-lg hover:opacity-90 font-semibold transition-all">
              Post Announcement
            </button>
          </form>
        </div>
      )}

      <div className="space-y-4">
        {announcements.map(ann => (
          <div key={ann.id} style={{ backgroundColor: theme.card, borderLeft: `4px solid ${ann.priority === 'high' ? theme.danger : ann.priority === 'medium' ? theme.warning : theme.success}` }} className="rounded-xl shadow-lg p-6">
            <div className="flex justify-between items-start mb-3">
              <h4 style={{ color: theme.text }} className="font-bold text-xl flex-1">{ann.title}</h4>
              <div className="flex items-center gap-3">
                <span style={{ backgroundColor: ann.priority === 'high' ? theme.danger : ann.priority === 'medium' ? theme.warning : theme.success }} className="px-3 py-1 rounded-full text-xs font-medium text-white uppercase">
                  {ann.priority}
                </span>
                {user.role === 'admin' && (
                  <button onClick={() => handleDelete(ann.id)} style={{ color: theme.danger }} className="p-2 hover:bg-opacity-10 hover:bg-current rounded-lg transition-all">
                    <Trash2 size={18} />
                  </button>
                )}
              </div>
            </div>
            <p style={{ color: theme.text, opacity: 0.8 }} className="text-sm mb-3">{ann.message}</p>
            <div className="flex items-center gap-4 text-xs" style={{ color: theme.text, opacity: 0.6 }}>
              <span>Posted by: {ann.author}</span>
              <span>•</span>
              <span>{new Date(ann.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</span>
            </div>
          </div>
        ))}
      </div>

      {announcements.length === 0 && (
        <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-12 text-center">
          <Bell size={48} style={{ color: theme.border }} className="mx-auto mb-4" />
          <p style={{ color: theme.text, opacity: 0.5 }}>No announcements yet</p>
        </div>
      )}
    </div>
  );
};

// Attendance View (unchanged - already working)
const AttendanceView = () => {
  const { timetable, theme, user, setAttendance, attendance, showNotification } = useAppContext();
  const [selectedClass, setSelectedClass] = useState(null);
  const [attendanceData, setAttendanceData] = useState({});

  const facultyClasses = timetable.filter(c => c.faculty === user.name);
  const today = new Date().toLocaleDateString('en-US', { weekday: 'long' });
  const todayClasses = facultyClasses.filter(c => c.day === today);

  const handleSelectClass = (classItem) => {
    setSelectedClass(classItem);
    const initial = {};
    STUDENT_LIST.forEach(s => initial[s.id] = false);
    setAttendanceData(initial);
  };

  const toggleAttendance = (studentId) => {
    setAttendanceData(prev => ({ ...prev, [studentId]: !prev[studentId] }));
  };

  const submitAttendance = () => {
    const presentStudents = Object.entries(attendanceData).filter(([_, present]) => present).map(([id]) => STUDENT_LIST.find(s => s.id === id)?.name);
    const newRecord = {
      id: `ATT${Date.now()}`,
      classId: selectedClass.id,
      date: new Date().toISOString(),
      presentCount: presentStudents.length,
      totalCount: STUDENT_LIST.length,
      presentStudents
    };
    setAttendance([...attendance, newRecord]);
    showNotification(`✅ Attendance submitted: ${presentStudents.length}/${STUDENT_LIST.length} present`, 'success');
    setSelectedClass(null);
  };

  if (!selectedClass) {
    return (
      <div className="space-y-6">
        <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
          <h3 style={{ color: theme.text }} className="text-2xl font-bold flex items-center gap-2 mb-2">
            <Check size={28} style={{ color: theme.success }} />
            Mark Attendance
          </h3>
          <p style={{ color: theme.text, opacity: 0.6 }} className="text-sm">
            Select a class to mark attendance
          </p>
        </div>

        <div>
          <h4 style={{ color: theme.text }} className="font-bold mb-4">Today's Classes ({today})</h4>
          {todayClasses.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {todayClasses.map(cls => (
                <div key={cls.id} onClick={() => handleSelectClass(cls)} style={{ backgroundColor: theme.card, borderLeft: `4px solid ${theme.primary}` }} className="p-6 rounded-xl shadow-lg hover:shadow-xl transition-all cursor-pointer">
                  <h5 style={{ color: theme.text }} className="font-bold text-lg mb-2">{cls.subject}</h5>
                  <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">{cls.timeSlot} • {cls.room}</p>
                </div>
              ))}
            </div>
          ) : (
            <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-12 text-center">
              <Calendar size={48} style={{ color: theme.border }} className="mx-auto mb-4" />
              <p style={{ color: theme.text, opacity: 0.5 }}>No classes today</p>
            </div>
          )}
        </div>

        <div>
          <h4 style={{ color: theme.text }} className="font-bold mb-4">All Your Classes</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {facultyClasses.map(cls => (
              <div key={cls.id} onClick={() => handleSelectClass(cls)} style={{ backgroundColor: theme.card, borderColor: theme.border }} className="border p-5 rounded-xl hover:shadow-lg transition-all cursor-pointer">
                <h5 style={{ color: theme.text }} className="font-bold mb-1">{cls.subject}</h5>
                <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">{cls.day} • {cls.timeSlot}</p>
                <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">{cls.room}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  const presentCount = Object.values(attendanceData).filter(Boolean).length;
  const percentage = ((presentCount / STUDENT_LIST.length) * 100).toFixed(1);

  return (
    <div className="space-y-6">
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h3 style={{ color: theme.text }} className="text-2xl font-bold">{selectedClass.subject}</h3>
            <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">{selectedClass.day} • {selectedClass.timeSlot} • {selectedClass.room}</p>
          </div>
          <button onClick={() => setSelectedClass(null)} style={{ backgroundColor: theme.background, color: theme.text }} className="px-4 py-2 rounded-lg hover:opacity-90 font-medium transition-all">
            Back
          </button>
        </div>

        <div className="grid grid-cols-3 gap-4">
          <div style={{ backgroundColor: theme.background }} className="p-4 rounded-lg text-center">
            <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">Total</p>
            <p style={{ color: theme.text }} className="text-3xl font-bold mt-1">{STUDENT_LIST.length}</p>
          </div>
          <div style={{ backgroundColor: theme.success }} className="p-4 rounded-lg text-center">
            <p className="text-sm text-white opacity-90">Present</p>
            <p className="text-3xl font-bold mt-1 text-white">{presentCount}</p>
          </div>
          <div style={{ backgroundColor: theme.primary }} className="p-4 rounded-lg text-center">
            <p className="text-sm text-white opacity-90">Percentage</p>
            <p className="text-3xl font-bold mt-1 text-white">{percentage}%</p>
          </div>
        </div>
      </div>

      <div className="space-y-2">
        {STUDENT_LIST.map(student => (
          <div key={student.id} onClick={() => toggleAttendance(student.id)} style={{ backgroundColor: attendanceData[student.id] ? theme.success : theme.card, borderColor: theme.border, color: attendanceData[student.id] ? 'white' : theme.text }} className="border p-4 rounded-xl cursor-pointer hover:shadow-lg transition-all flex items-center justify-between">
            <div>
              <p className="font-bold">{student.name}</p>
              <p className="text-sm opacity-70">{student.rollNo}</p>
            </div>
            {attendanceData[student.id] && <Check size={24} />}
          </div>
        ))}
      </div>

      <button onClick={submitAttendance} disabled={presentCount === 0} style={{ backgroundColor: theme.primary }} className="w-full px-4 py-4 text-white rounded-xl hover:opacity-90 disabled:opacity-50 font-bold text-lg transition-all shadow-lg">
        Submit Attendance ({presentCount}/{STUDENT_LIST.length})
      </button>
    </div>
  );
};

// Upload Grades View (unchanged - already working)
const UploadGradesView = () => {
  const { theme, user, grades, setGrades, showNotification } = useAppContext();
  const [formData, setFormData] = useState({
    studentRollNo: '',
    studentName: '',
    midterm: '',
    final: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    const avg = ((parseFloat(formData.midterm) + parseFloat(formData.final)) / 2).toFixed(1);
    let grade = 'F';
    if (avg >= 90) grade = 'A+';
    else if (avg >= 85) grade = 'A';
    else if (avg >= 80) grade = 'B+';
    else if (avg >= 75) grade = 'B';
    else if (avg >= 70) grade = 'C+';
    else if (avg >= 60) grade = 'C';

    const newGrade = {
      id: `G${Date.now()}`,
      ...formData,
      subject: user.subject,
      midterm: parseFloat(formData.midterm),
      final: parseFloat(formData.final),
      average: parseFloat(avg),
      grade,
      facultyName: user.name
    };

    setGrades([...grades, newGrade]);
    showNotification(`✅ Grades uploaded for ${user.subject}!`, 'success');
    setFormData({ studentRollNo: '', studentName: '', midterm: '', final: '' });
  };

  return (
    <div className="space-y-6">
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h3 style={{ color: theme.text }} className="text-2xl font-bold flex items-center gap-2 mb-2">
          <FileText size={28} style={{ color: theme.primary }} />
          Upload Student Grades
        </h3>
        <p style={{ color: theme.text, opacity: 0.6 }} className="text-sm">
          Subject: {user.subject}
        </p>
      </div>

      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Student</label>
              <select value={formData.studentRollNo} onChange={(e) => {
                const student = STUDENT_LIST.find(s => s.rollNo === e.target.value);
                setFormData({...formData, studentRollNo: e.target.value, studentName: student?.name || ''});
              }} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" required>
                <option value="">Select Student</option>
                {STUDENT_LIST.map(s => (
                  <option key={s.id} value={s.rollNo}>{s.rollNo} - {s.name}</option>
                ))}
              </select>
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Student Name</label>
              <input type="text" value={formData.studentName} readOnly style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" />
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Midterm Score (0-100)</label>
              <input type="number" min="0" max="100" value={formData.midterm} onChange={(e) => setFormData({...formData, midterm: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" required />
            </div>
            <div>
              <label style={{ color: theme.text }} className="block text-sm font-medium mb-2">Final Score (0-100)</label>
              <input type="number" min="0" max="100" value={formData.final} onChange={(e) => setFormData({...formData, final: e.target.value})} style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} className="w-full px-4 py-3 border rounded-lg" required />
            </div>
          </div>
          <button type="submit" style={{ backgroundColor: theme.primary }} className="w-full px-4 py-3 text-white rounded-lg hover:opacity-90 font-semibold transition-all">
            Upload Grades
          </button>
        </form>
      </div>

      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">Recently Uploaded</h4>
        {grades.filter(g => g.subject === user.subject).length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead style={{ backgroundColor: theme.background }}>
                <tr>
                  <th style={{ color: theme.text }} className="px-4 py-3 text-left text-sm font-bold">Student</th>
                  <th style={{ color: theme.text }} className="px-4 py-3 text-left text-sm font-bold">Roll No</th>
                  <th style={{ color: theme.text }} className="px-4 py-3 text-left text-sm font-bold">Midterm</th>
                  <th style={{ color: theme.text }} className="px-4 py-3 text-left text-sm font-bold">Final</th>
                  <th style={{ color: theme.text }} className="px-4 py-3 text-left text-sm font-bold">Average</th>
                  <th style={{ color: theme.text }} className="px-4 py-3 text-left text-sm font-bold">Grade</th>
                </tr>
              </thead>
              <tbody>
                {grades.filter(g => g.subject === user.subject).map(item => (
                  <tr key={item.id} style={{ borderTop: `1px solid ${theme.border}` }}>
                    <td style={{ color: theme.text }} className="px-4 py-3">{item.studentName}</td>
                    <td style={{ color: theme.text, opacity: 0.8 }} className="px-4 py-3">{item.studentRollNo}</td>
                    <td style={{ color: theme.text, opacity: 0.8 }} className="px-4 py-3">{item.midterm}</td>
                    <td style={{ color: theme.text, opacity: 0.8 }} className="px-4 py-3">{item.final}</td>
                    <td style={{ color: theme.text, opacity: 0.8 }} className="px-4 py-3">{item.average}</td>
                    <td className="px-4 py-3">
                      <span style={{ backgroundColor: theme.primary }} className="px-3 py-1 rounded-full text-white font-bold">{item.grade}</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="text-center py-12">
            <FileText size={48} style={{ color: theme.border }} className="mx-auto mb-4" />
            <p style={{ color: theme.text, opacity: 0.5 }}>No grades uploaded yet for {user.subject}</p>
          </div>
        )}
      </div>
    </div>
  );
};

// Student Grades View (unchanged - already working)
const StudentGradesView = () => {
  const { grades, theme, user } = useAppContext();
  const myGrades = grades.filter(g => g.studentRollNo === user.rollNo);
  const overallGPA = myGrades.length > 0 ? (myGrades.reduce((acc, g) => acc + g.average, 0) / myGrades.length).toFixed(2) : '0.00';

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div style={{ background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.secondary} 100%)` }} className="rounded-xl shadow-lg p-6 text-white">
          <div className="flex items-center justify-between mb-3">
            <Award size={32} />
          </div>
          <p className="text-sm opacity-90">Overall Average</p>
          <p className="text-4xl font-bold mt-2">{overallGPA}%</p>
        </div>
        <div style={{ background: `linear-gradient(135deg, ${theme.success} 0%, #059669 100%)` }} className="rounded-xl shadow-lg p-6 text-white">
          <div className="flex items-center justify-between mb-3">
            <Book size={32} />
          </div>
          <p className="text-sm opacity-90">Courses</p>
          <p className="text-4xl font-bold mt-2">{myGrades.length}</p>
        </div>
        <div style={{ background: `linear-gradient(135deg, ${theme.accent} 0%, #DB2777 100%)` }} className="rounded-xl shadow-lg p-6 text-white">
          <div className="flex items-center justify-between mb-3">
            <TrendingUp size={32} />
          </div>
          <p className="text-sm opacity-90">Performance</p>
          <p className="text-2xl font-bold mt-2">{parseFloat(overallGPA) >= 85 ? 'Excellent' : parseFloat(overallGPA) >= 75 ? 'Good' : 'Average'}</p>
        </div>
      </div>

      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h3 style={{ color: theme.text }} className="text-2xl font-bold mb-6">Academic Performance</h3>
        {myGrades.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead style={{ backgroundColor: theme.background }}>
                <tr>
                  <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Subject</th>
                  <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Midterm</th>
                  <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Final</th>
                  <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Average</th>
                  <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Grade</th>
                  <th style={{ color: theme.text }} className="px-6 py-4 text-left text-sm font-bold">Faculty</th>
                </tr>
              </thead>
              <tbody>
                {myGrades.map(item => (
                  <tr key={item.id} style={{ borderTop: `1px solid ${theme.border}` }} className="hover:bg-opacity-5 hover:bg-current transition-all">
                    <td style={{ color: theme.text }} className="px-6 py-4 font-bold">{item.subject}</td>
                    <td style={{ color: theme.text, opacity: 0.8 }} className="px-6 py-4">{item.midterm}</td>
                    <td style={{ color: theme.text, opacity: 0.8 }} className="px-6 py-4">{item.final}</td>
                    <td style={{ color: theme.primary }} className="px-6 py-4 font-bold">{item.average}%</td>
                    <td className="px-6 py-4">
                      <span style={{ backgroundColor: theme.primary }} className="px-4 py-2 rounded-full text-white font-bold text-lg">
                        {item.grade}
                      </span>
                    </td>
                    <td style={{ color: theme.text, opacity: 0.8 }} className="px-6 py-4">{item.facultyName}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="text-center py-12">
            <Award size={48} style={{ color: theme.border }} className="mx-auto mb-4" />
            <p style={{ color: theme.text, opacity: 0.5 }}>No grades available yet</p>
          </div>
        )}
      </div>

      {myGrades.length > 0 && (
        <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
          <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">Grade Distribution</h4>
          <div className="space-y-3">
            {myGrades.map(item => (
              <div key={item.id}>
                <div className="flex justify-between items-center mb-2">
                  <span style={{ color: theme.text }} className="text-sm font-semibold">{item.subject}</span>
                  <span style={{ color: theme.primary }} className="text-sm font-bold">{item.average}%</span>
                </div>
                <div style={{ backgroundColor: theme.background }} className="w-full h-3 rounded-full overflow-hidden">
                  <div 
                    style={{ 
                      width: `${item.average}%`, 
                      background: `linear-gradient(90deg, ${theme.primary} 0%, ${theme.secondary} 100%)` 
                    }} 
                    className="h-full rounded-full transition-all duration-1000"
                  ></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};
const SettingsView = () => {
  const { user, theme, clearAllData } = useAppContext();

  return (
    <div className="space-y-6">
      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h3 style={{ color: theme.text }} className="text-2xl font-bold flex items-center gap-2 mb-6">
          <Settings size={28} style={{ color: theme.primary }} />
          Account Settings
        </h3>
        
        <div className="space-y-4">
          <div>
            <label style={{ color: theme.text, opacity: 0.7 }} className="block text-sm font-medium mb-2">
              Full Name
            </label>
            <input 
              type="text" 
              value={user?.name || ''} 
              readOnly 
              style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} 
              className="w-full px-4 py-3 border rounded-lg" 
            />
          </div>
          
          <div>
            <label style={{ color: theme.text, opacity: 0.7 }} className="block text-sm font-medium mb-2">
              Email Address
            </label>
            <input 
              type="email" 
              value={user?.email || ''} 
              readOnly 
              style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} 
              className="w-full px-4 py-3 border rounded-lg" 
            />
          </div>
          
          <div>
            <label style={{ color: theme.text, opacity: 0.7 }} className="block text-sm font-medium mb-2">
              Role
            </label>
            <input 
              type="text" 
              value={user?.role || ''} 
              readOnly 
              style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} 
              className="w-full px-4 py-3 border rounded-lg capitalize" 
            />
          </div>
          
          {user?.subject && (
            <div>
              <label style={{ color: theme.text, opacity: 0.7 }} className="block text-sm font-medium mb-2">
                Subject
              </label>
              <input 
                type="text" 
                value={user.subject} 
                readOnly 
                style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} 
                className="w-full px-4 py-3 border rounded-lg" 
              />
            </div>
          )}
          
          {user?.rollNo && (
            <div>
              <label style={{ color: theme.text, opacity: 0.7 }} className="block text-sm font-medium mb-2">
                Roll Number
              </label>
              <input 
                type="text" 
                value={user.rollNo} 
                readOnly 
                style={{ backgroundColor: theme.background, color: theme.text, borderColor: theme.border }} 
                className="w-full px-4 py-3 border rounded-lg" 
              />
            </div>
          )}
        </div>
      </div>

      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">
          Notification Preferences
        </h4>
        <div className="space-y-3">
          <label className="flex items-center gap-3 cursor-pointer">
            <input type="checkbox" defaultChecked className="w-5 h-5 rounded" style={{ accentColor: theme.primary }} />
            <span style={{ color: theme.text }}>
              Email notifications for schedule changes
            </span>
          </label>
          
          <label className="flex items-center gap-3 cursor-pointer">
            <input type="checkbox" defaultChecked className="w-5 h-5 rounded" style={{ accentColor: theme.primary }} />
            <span style={{ color: theme.text }}>
              Push notifications for upcoming classes
            </span>
          </label>
          
          <label className="flex items-center gap-3 cursor-pointer">
            <input type="checkbox" className="w-5 h-5 rounded" style={{ accentColor: theme.primary }} />
            <span style={{ color: theme.text }}>
              Weekly schedule summary
            </span>
          </label>
        </div>
      </div>

      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">
          System Information
        </h4>
        <div className="space-y-2 text-sm" style={{ color: theme.text, opacity: 0.8 }}>
          <p><strong>System:</strong> Smart Education v2.0</p>
          <p><strong>Build:</strong> Hackathon Edition - FULLY UPDATED</p>
          <p><strong>Features:</strong> AI Scheduling, Smart Classroom, Real-time Analytics, Chatbot, Team Section</p>
          <p><strong>Status:</strong> <span style={{ color: theme.success }}>● All Systems Operational</span></p>
        </div>
      </div>

      <div style={{ backgroundColor: theme.card }} className="rounded-xl shadow-lg p-6">
        <h4 style={{ color: theme.text }} className="text-lg font-bold mb-4">
          Data Management
        </h4>
        <div className="space-y-4">
          <p style={{ color: theme.text, opacity: 0.7 }} className="text-sm">
            Clear all data from your local storage. This will remove all timetables, bookings, announcements, grades, and other data. This action cannot be undone.
          </p>
          <button 
            onClick={() => {
              if (window.confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
                clearAllData();
              }
            }}
            style={{ backgroundColor: theme.danger }}
            className="px-4 py-2 text-white rounded-lg hover:opacity-90 font-medium transition-all"
          >
            Clear All Data
          </button>
        </div>
      </div>
    </div>
  );
};
// Main App Export
function App() {
  return (
    <AppProvider>
      <SmartEducationApp />
      <style>{`
        @keyframes slide-in {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        @keyframes float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-20px); }
        }
        @keyframes float-delay {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(20px); }
        }
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
        @keyframes fall {
          to { transform: translateY(100vh) rotate(360deg); opacity: 0; }
        }
        .animate-slide-in { animation: slide-in 0.4s ease-out; }
        .animate-float { animation: float 6s ease-in-out infinite; }
        .animate-float-delay { animation: float-delay 6s ease-in-out infinite; }
        .animate-spin { animation: spin 1s linear infinite; }
        .animate-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        .animate-fall { animation: fall linear forwards; }
        
        * { 
          transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, opacity 0.3s ease;
        }
        
        ::-webkit-scrollbar { width: 10px; height: 10px; }
        ::-webkit-scrollbar-track { background: transparent; }
        ::-webkit-scrollbar-thumb { 
          background: linear-gradient(180deg, #6366F1 0%, #8B5CF6 100%);
          border-radius: 5px; 
        }
        ::-webkit-scrollbar-thumb:hover { opacity: 0.8; }
        
        html { scroll-behavior: smooth; }
        
        input:focus, select:focus, textarea:focus, button:focus {
          outline: 2px solid #6366F1;
          outline-offset: 2px;
        }
        
        button:not(:disabled):hover {
          transform: translateY(-1px);
        }
        
        button:not(:disabled):active {
          transform: translateY(0);
        }

        @media print {
          .no-print { display: none !important; }
          body * { visibility: hidden; }
          .timetable-print, .timetable-print * { visibility: visible; }
          .timetable-print { 
            position: absolute; 
            left: 0; 
            top: 0; 
            width: 100%;
          }
          @page { size: landscape; margin: 1cm; }
        }
      `}</style>
    </AppProvider>
  );
}
export default App;
